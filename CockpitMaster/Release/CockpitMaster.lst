

HI-TECH Software PICC Macro Assembler V9.60PL5 build 3884 
                                                      Sun May  3 13:47:25 2009

HI-TECH Software Omniscient Code Generator build 3884
     1  0000                     opt subtitle "HI-TECH Software Omniscient Code 
                                 Generator build 3884"
     2                           
     3                           	processor	16F877A
     4                           clrc	macro
     5                           	bcf	status,0
     6  0000                     	endm
     7                           clrz	macro
     8                           	bcf	status,2
     9  0000                     	endm
    10                           setc	macro
    11                           	bsf	status,0
    12  0000                     	endm
    13                           setz	macro
    14                           	bsf	status,2
    15  0000                     	endm
    16                           skipc	macro
    17                           	btfss	status,0
    18  0000                     	endm
    19                           skipz	macro
    20                           	btfss	status,2
    21  0000                     	endm
    22                           skipnc	macro
    23                           	btfsc	status,0
    24  0000                     	endm
    25                           skipnz	macro
    26                           	btfsc	status,2
    27  0000                     	endm
    28  0000                     indf	equ	0
    29  0000                     indf0	equ	0
    30  0000                     pc	equ	2
    31  0000                     pcl	equ	2
    32  0000                     status	equ	3
    33  0000                     fsr	equ	4
    34  0000                     fsr0	equ	4
    35  0000                     c	equ	1
    36  0000                     z	equ	0
    37  0000                     pclath	equ	10
    38                           # 14 "../init.c"
    39                           	psect config,class=CONFIG,delta=2 ;#
    40                           # 14 "../init.c"
    41  2007  3F32               	dw 0x3FFE & 0x3FFB & 0x3FF7 & 0x3FBF & 0x3F7F 
                                 & 0x3FFF & 0x3FFF & 0x3FFF & 0x3FFF ;#
    42                           global __tempreg
    43  0000                     __tempreg	set	73
    44                           global __Lrbss_0, __Hrbss_0
    45  0000                     __Lrbss_0 set 0x3E
    46  0000                     __Hrbss_0 set 0x49
    47                           global __Lcommon, __Hcommon
    48  0000                     __Lcommon set 0x70
    49  0000                     __Hcommon set 0x7E
    50                           global __Lrbss_1, __Hrbss_1
    51  0000                     __Lrbss_1 set 0xC0
    52  0000                     __Hrbss_1 set 0xF0
    53                           global __Lrbss_2, __Hrbss_2
    54  0000                     __Lrbss_2 set 0x140
    55  0000                     __Hrbss_2 set 0x170
    56                           global __Lrdata_0, __Hrdata_0
    57  0000                     __Lrdata_0	equ	0x0
    58  0000                     __Hrdata_0	equ	0x1
    59                           global __Lramdata, __Lrdata_0, __Hramdata, __Hr
                                 data_0
    60  0000                     __Lramdata	set	__Lrdata_0
    61  0000                     __Hramdata	set	__Hrdata_0
    62                           	GLOBAL	__databank
    63  0000                     __databank	EQU	0
    64  0000                     _main_entry	equ	??_main+0
    65                           	global	_main_entry
    66  0000                     _in_pop_rv	equ	??_in_pop+0
    67                           	global	_in_pop_rv
    68  0000                     _rof_send_packet_packet	equ	?_rof_send_packet+0
    69                           	global	_rof_send_packet_packet
    70  0000                     _uart_send_packet_packet	equ	?_uart_send_packet
                                 +0
    71                           	global	_uart_send_packet_packet
    72  0000                     _rof_write_byte_data	equ	??_rof_write_byte+0
    73                           	global	_rof_write_byte_data
    74  0000                     _rof_write_byte_i	equ	??_rof_write_byte+1
    75                           	global	_rof_write_byte_i
    76  0000                     _uart_putc_byte	equ	??_uart_putc+0
    77                           	global	_uart_putc_byte
    78  0000                     ___wmul_product	equ	??___wmul+0
    79                           	global	___wmul_product
    80  0000                     ___wmul_multiplier	equ	?___wmul+0
    81                           	global	___wmul_multiplier
    82  0000                     ___wmul_multiplicand	equ	?___wmul+2
    83                           	global	___wmul_multiplicand
    84  0000                     ___bmul_multiplier	equ	??___bmul+0
    85                           	global	___bmul_multiplier
    86  0000                     ___bmul_product	equ	??___bmul+1
    87                           	global	___bmul_product
    88  0000                     ___bmul_multiplicand	equ	?___bmul+0
    89                           	global	___bmul_multiplicand
    90  0000                     _uart_interrupt_data	equ	??_uart_interrupt+0
    91                           	global	_uart_interrupt_data
    92  0000                     _sb_interrupt_packet	equ	??_sb_interrupt+0
    93                           	global	_sb_interrupt_packet
    94  0000                     _adc_interrupt_old_value	equ	??_adc_interrupt+0
    95                           	global	_adc_interrupt_old_value
    96  0000                     _adc_interrupt_new_value	equ	??_adc_interrupt+1
    97                           	global	_adc_interrupt_new_value
    98  0000                     _adc_interrupt_lo_bound	equ	??_adc_interrupt+2
    99                           	global	_adc_interrupt_lo_bound
   100  0000                     _adc_interrupt_hi_bound	equ	??_adc_interrupt+3
   101                           	global	_adc_interrupt_hi_bound
   102  0000                     _adc_interrupt_entry	equ	??_adc_interrupt+4
   103                           	global	_adc_interrupt_entry
   104  0000                     _in_push_entry	equ	?_in_push+0
   105                           	global	_in_push_entry
   106  0000                     i1___wmul_product	equ	??i1___wmul+0
   107                           	global	i1___wmul_product
   108  0000                     i1___wmul_multiplier	equ	?i1___wmul+0
   109                           	global	i1___wmul_multiplier
   110  0000                     i1___wmul_multiplicand	equ	?i1___wmul+2
   111                           	global	i1___wmul_multiplicand
   112  0000                     i1___bmul_product	equ	??i1___bmul+0
   113                           	global	i1___bmul_product
   114  0000                     i1___bmul_multiplier	equ	??i1___bmul+1
   115                           	global	i1___bmul_multiplier
   116  0000                     i1___bmul_multiplicand	equ	?i1___bmul+0
   117                           	global	i1___bmul_multiplicand
   118                           ;Data sizes: Strings 0, constant 0, data 0, bss
                                  0, persistent 0 stack 38
   119                           	global	_main
   120                           	global	??_main
   121                           	global	?_main
   122                           
   123                           ; *************** function _main **************
                                 *
   124                           ; Defined at:
   125                           ;		line 24 in file "../main.c"
   126                           ; Parameters:
   127                           ;		None
   128                           ; Auto variables:
   129                           ;		entry       	       	type: struct packet_t
   130                           ; Return value:
   131                           ;		type: void 
   132                           ;		size: 0
   133                           ; Registers used:
   134                           ;		wreg, fsr, status,2, status,0, pclath, cstac
                                 k
   135                           ; Tracked objects:
   136                           ;		On entry : BFF/0
   137                           ;		On exit  : 0/0
   138                           ;		Unchanged: 0/0
   139                           ; Data sizes:
   140                           ;		Autos:    3
   141                           ;		Params:   0
   142                           ;		Temp:     0
   143                           ;		Total:    3
   144                           ; This function calls:
   145                           ;		_init
   146                           ;		_rof_init
   147                           ;		_adc_advance
   148                           ;		_adc_read
   149                           ;		_in_pending
   150                           ;		_in_pop
   151                           ;		_uart_send_packet
   152                           ;		_rof_send_packet
   153                           ; This function is called by:
   154                           ;		Startup code after reset
   155                           ; This function uses a non-reentrant model
   156                           ; 
   157                           	psect	maintext,class=CODE,delta=2
   158                           	file	"../main.c"
   159                           	line	24
   160                           	psect	maintext
   161                           ;main.c: 23: void
   162                           ;main.c: 24: main(void) {
   163                           	
   164  003F                     _main:	
   165                           ; Regs used in _main: [wreg+fsr+status,2+status
                                 ,0+pclath+cstack]
   166                           	line	25
   167                           ;main.c: 25: init();
   168  003F  120A  118A  21F7   	fcall	_init
              120A  118A         
   169                           	line	26
   170                           ;main.c: 26: rof_init();
   171  0044  120A  118A  23BB   	fcall	_rof_init
              120A  118A         
   172                           	line	28
   173                           ;main.c: 28: while (1){
   174                           	
   175  0049                     l37:	
   176                           	line	29
   177                           ;main.c: 29: if (!(ADGO || ADIF)) {
   178  0049  1283               	bcf	status, 5	;RP0=0, select bank0
   179  004A  1303               	bcf	status, 6	;RP2=0, select bank0
   180  004B  191F               	btfsc	(250/8),(250)&7
   181  004C  284E               	goto	u2131
   182  004D  284F               	goto	u2130
   183  004E                     u2131:
   184  004E  285D               	goto	l39
   185  004F                     u2130:
   186  004F  1B0C               	btfsc	(102/8),(102)&7
   187  0050  2852               	goto	u2141
   188  0051  2853               	goto	u2140
   189  0052                     u2141:
   190  0052  285D               	goto	l39
   191  0053                     u2140:
   192                           	line	30
   193                           ;main.c: 30: adc_advance();
   194  0053  120A  118A  23B2   	fcall	_adc_advance
              120A  118A         
   195                           	line	31
   196                           ;main.c: 31: adc_read();
   197  0058  120A  118A  231A   	fcall	_adc_read
              120A  118A         
   198                           	line	32
   199                           	
   200  005D                     l39:	
   201                           	line	36
   202                           ;main.c: 32: }
   203                           ;main.c: 36: if (in_pending()) {
   204  005D  120A  118A  2398   	fcall	_in_pending
              120A  118A         
   205  0062  3A00               	xorlw	0
   206  0063  1903               	skipnz
   207  0064  2866               	goto	u2151
   208  0065  2867               	goto	u2150
   209  0066                     u2151:
   210  0066  2890               	goto	l36
   211  0067                     u2150:
   212                           	line	37
   213                           ;main.c: 37: struct packet_t entry = in_pop();
   214  0067  120A  118A  22D0   	fcall	_in_pop
              120A  118A         
   215  006C  1283               	bcf	status, 5	;RP0=0, select bank0
   216  006D  1303               	bcf	status, 6	;RP2=0, select bank0
   217                           	
   218  006E  084C               	movf	(0+?_in_pop),w
   219  006F  00C9               	movwf	(_main_entry)
   220  0070  084D               	movf	(1+?_in_pop),w
   221  0071  00CA               	movwf	(_main_entry+1)
   222  0072  084E               	movf	(2+?_in_pop),w
   223  0073  00CB               	movwf	(_main_entry+2)
   224                           	line	38
   225                           ;main.c: 38: if (entry.dst_id == 0) {
   226                           	
   227  0074  08CA               	movf	(0+_main_entry+01h)&07fh,f
   228  0075  1D03               	skipz
   229  0076  2878               	goto	u2161
   230  0077  2879               	goto	u2160
   231  0078                     u2161:
   232  0078  2885               	goto	l41
   233  0079                     u2160:
   234                           	line	39
   235                           ;main.c: 39: uart_send_packet(entry);
   236                           	
   237                           	
   238  0079  0849               	movf	(_main_entry),w
   239  007A  00CC               	movwf	(?_uart_send_packet)
   240  007B  084A               	movf	(_main_entry+1),w
   241  007C  00CD               	movwf	(?_uart_send_packet+1)
   242  007D  084B               	movf	(_main_entry+2),w
   243  007E  00CE               	movwf	(?_uart_send_packet+2)
   244  007F  120A  118A  233D   	fcall	_uart_send_packet
              120A  118A         
   245                           	line	40
   246                           ;main.c: 40: } else {
   247  0084  2890               	goto	l36
   248                           	
   249  0085                     l41:	
   250                           	line	41
   251                           ;main.c: 41: rof_send_packet(entry);
   252                           	
   253                           	
   254  0085  0849               	movf	(_main_entry),w
   255  0086  00CC               	movwf	(?_rof_send_packet)
   256  0087  084A               	movf	(_main_entry+1),w
   257  0088  00CD               	movwf	(?_rof_send_packet+1)
   258  0089  084B               	movf	(_main_entry+2),w
   259  008A  00CE               	movwf	(?_rof_send_packet+2)
   260  008B  120A  118A  22F7   	fcall	_rof_send_packet
              120A  118A         
   261                           	line	42
   262                           	
   263  0090                     l42:	
   264                           	line	43
   265                           	
   266  0090                     l40:	
   267                           	line	44
   268                           	
   269  0090                     l36:	
   270                           	line	28
   271  0090  2849               	goto	l37
   272                           	global	start
   273  0091  120A  118A  2812   	ljmp	start
   274                           ; =============== function _main ends =========
                                 ======
   275                           
   276                           GLOBAL __end_of_main
   277  0094                     	__end_of_main:
   278                           	FNSIZE	_main,3,0
   279                           	psect	maintext
   280                           	line	45
   281                           	signat	_main,88
   282                           	global	_in_pop
   283                           	global	??_in_pop
   284                           	global	?_in_pop
   285                           
   286                           ; *************** function _in_pop ************
                                 ***
   287                           ; Defined at:
   288                           ;		line 24 in file "../fifo.c"
   289                           ; Parameters:
   290                           ;		None
   291                           ; Auto variables:
   292                           ;		rv          	       	type: struct packet_t
   293                           ; Return value:
   294                           ;		type: struct packet_t
   295                           ;		size: 3
   296                           ; Registers used:
   297                           ;		wreg, fsr, status,2, status,0, pclath, cstac
                                 k
   298                           ; Tracked objects:
   299                           ;		On entry : 0/0
   300                           ;		On exit  : 0/0
   301                           ;		Unchanged: 0/0
   302                           ; Data sizes:
   303                           ;		Autos:    3
   304                           ;		Params:   3
   305                           ;		Temp:     1
   306                           ;		Total:    7
   307                           ; This function calls:
   308                           ;		___wmul
   309                           ;		___bmul
   310                           ; This function is called by:
   311                           ;		_main
   312                           ; This function uses a non-reentrant model
   313                           ; 
   314                           	psect	text157,local,class=CODE,delta=2
   315                           	file	"../fifo.c"
   316                           	line	24
   317                           ;fifo.c: 24: struct packet_t in_pop(void) {
   318                           	
   319  02D0                     _in_pop:	
   320                           ; Regs used in _in_pop: [wreg+fsr+status,2+stat
                                 us,0+pclath+cstack]
   321                           	line	26
   322                           ;fifo.c: 25: struct packet_t rv;
   323                           ;fifo.c: 26: rv = in_fifo[in_oidx];
   324  02D0  3003               	movlw	(03h)
   325  02D1  1283               	bcf	status, 5	;RP0=0, select bank0
   326  02D2  1303               	bcf	status, 6	;RP2=0, select bank0
   327                           	
   328  02D3  00D3               	movwf	(?___bmul)
   329                           	
   330  02D4  087A               	movf	(122),w
   331                           	
   332  02D5  120A  118A  237C   	fcall	___bmul
              120A  118A         
   333  02DA  3EC0               	addlw	192&0ffh
   334  02DB  0084               	movwf	fsr
   335  02DC  1283               	bcf	status, 5	;RP0=0, select bank0
   336  02DD  1303               	bcf	status, 6	;RP2=0, select bank0
   337                           	
   338  02DE  1383               	bcf	status, 7	;select IRP bank0
   339  02DF  0800               	movf	indf,w
   340  02E0  00CF               	movwf	(_in_pop_rv)
   341  02E1  0A84               	incf	fsr,f
   342  02E2  0800               	movf	indf,w
   343  02E3  00D0               	movwf	(_in_pop_rv+1)
   344  02E4  0A84               	incf	fsr,f
   345  02E5  0800               	movf	indf,w
   346  02E6  00D1               	movwf	(_in_pop_rv+2)
   347                           	line	27
   348                           ;fifo.c: 27: ++in_oidx;
   349  02E7  3001               	movlw	(01h)
   350  02E8  00D2               	movwf	(??_in_pop+3+0)
   351                           	
   352  02E9  0852               	movf	(??_in_pop+3+0),w
   353  02EA  07FA               	addwf	(122),f
   354                           	line	28
   355                           ;fifo.c: 28: in_oidx &= (16-1);;
   356  02EB  300F               	movlw	(0Fh)
   357  02EC  00D2               	movwf	(??_in_pop+3+0)
   358                           	
   359  02ED  0852               	movf	(??_in_pop+3+0),w
   360  02EE  05FA               	andwf	(122),f
   361                           	line	29
   362                           	
   363                           	
   364  02EF  084F               	movf	(_in_pop_rv),w
   365  02F0  00CC               	movwf	(?_in_pop)
   366  02F1  0850               	movf	(_in_pop_rv+1),w
   367  02F2  00CD               	movwf	(?_in_pop+1)
   368  02F3  0851               	movf	(_in_pop_rv+2),w
   369  02F4  00CE               	movwf	(?_in_pop+2)
   370  02F5  2AF6               	goto	l53
   371                           	line	30
   372                           ;fifo.c: 30: }
   373  02F6                     l53:	
   374  02F6  0008               	return
   375                           ; =============== function _in_pop ends =======
                                 ========
   376                           
   377                           GLOBAL __end_of_in_pop
   378  02F7                     	__end_of_in_pop:
   379                           	FNSIZE	_in_pop,4,3
   380                           	signat	_in_pop,91
   381                           	global	_in_pending
   382                           	global	??_in_pending
   383                           	global	?_in_pending
   384                           
   385                           ; *************** function _in_pending ********
                                 *******
   386                           ; Defined at:
   387                           ;		line 33 in file "../fifo.c"
   388                           ; Parameters:
   389                           ;		None
   390                           ; Auto variables:
   391                           ;		None
   392                           ; Return value:
   393                           ;		type: unsigned char 
   394                           ;		size: 1
   395                           ; Registers used:
   396                           ;		wreg, status,2, status,0
   397                           ; Tracked objects:
   398                           ;		On entry : 0/0
   399                           ;		On exit  : 0/0
   400                           ;		Unchanged: 0/0
   401                           ; Data sizes:
   402                           ;		Autos:    0
   403                           ;		Params:   0
   404                           ;		Temp:     0
   405                           ;		Total:    0
   406                           ; This function calls:
   407                           ;		Nothing
   408                           ; This function is called by:
   409                           ;		_main
   410                           ; This function uses a non-reentrant model
   411                           ; 
   412                           	psect	text158,local,class=CODE,delta=2
   413                           	file	"../fifo.c"
   414                           	line	33
   415                           ;fifo.c: 32: unsigned char in_pending(void)
   416                           ;fifo.c: 33: {
   417                           	
   418  0398                     _in_pending:	
   419                           ; Regs used in _in_pending: [wreg+status,2+stat
                                 us,0]
   420                           	line	34
   421                           ;fifo.c: 34: if (in_iidx > in_oidx) {
   422  0398  1283               	bcf	status, 5	;RP0=0, select bank0
   423  0399  1303               	bcf	status, 6	;RP2=0, select bank0
   424                           	
   425  039A  087B               	movf	(123),w
   426                           	
   427                           	
   428  039B  027A               	subwf	(122),w
   429  039C  1803               	skipnc
   430  039D  2B9F               	goto	u2171
   431  039E  2BA0               	goto	u2170
   432  039F                     u2171:
   433  039F  2BA3               	goto	l55
   434  03A0                     u2170:
   435                           	line	35
   436                           ;fifo.c: 35: return (in_iidx - in_oidx);
   437                           	
   438  03A0  087A               	movf	(122),w
   439                           	
   440                           	
   441  03A1  027B               	subwf	(123),w
   442  03A2  2BA6               	goto	l54
   443                           	line	36
   444                           	
   445  03A3                     l55:	
   446                           	line	37
   447                           ;fifo.c: 37: return (in_oidx - in_iidx);
   448                           	
   449  03A3  087B               	movf	(123),w
   450                           	
   451                           	
   452  03A4  027A               	subwf	(122),w
   453  03A5  2BA6               	goto	l54
   454                           	line	39
   455                           ;fifo.c: 38: }
   456                           ;fifo.c: 39: }
   457  03A6                     l54:	
   458  03A6  0008               	return
   459                           ; =============== function _in_pending ends ===
                                 ============
   460                           
   461                           GLOBAL __end_of_in_pending
   462  03A7                     	__end_of_in_pending:
   463                           	FNSIZE	_in_pending,0,0
   464                           	signat	_in_pending,89
   465                           	global	_rof_send_packet
   466                           	global	??_rof_send_packet
   467                           	global	?_rof_send_packet
   468                           
   469                           ; *************** function _rof_send_packet ***
                                 ************
   470                           ; Defined at:
   471                           ;		line 16 in file "../main.c"
   472                           ; Parameters:
   473                           ;		packet      	offs:   0	type: struct packet_t
   474                           ; Auto variables:
   475                           ;		None
   476                           ; Return value:
   477                           ;		type: void 
   478                           ;		size: 0
   479                           ; Registers used:
   480                           ;		wreg, status,2, status,0, pclath, cstack
   481                           ; Tracked objects:
   482                           ;		On entry : 300/0
   483                           ;		On exit  : 0/0
   484                           ;		Unchanged: 0/0
   485                           ; Data sizes:
   486                           ;		Autos:    0
   487                           ;		Params:   3
   488                           ;		Temp:     2
   489                           ;		Total:    5
   490                           ; This function calls:
   491                           ;		_rof_write_byte
   492                           ;		__delay
   493                           ; This function is called by:
   494                           ;		_main
   495                           ; This function uses a non-reentrant model
   496                           ; 
   497                           	psect	text159,local,class=CODE,delta=2
   498                           	file	"../main.c"
   499                           	line	16
   500                           ;main.c: 16: static void rof_send_packet(struct
                                  packet_t packet) {
   501                           	
   502  02F7                     _rof_send_packet:	
   503                           ; Regs used in _rof_send_packet: [wreg+status,2
                                 +status,0+pclath+cstack]
   504                           	line	17
   505                           ;main.c: 17: rof_write_byte(packet.src_id);
   506                           	
   507  02F7  084C               	movf	(_rof_send_packet_packet),w
   508  02F8  1383               	bcf	status, 7	;select IRP bank0
   509                           	
   510  02F9  120A  118A  21C5   	fcall	_rof_write_byte
              120A  118A         
   511                           	line	18
   512                           ;main.c: 18: rof_write_byte(packet.dst_id);
   513  02FE  1283               	bcf	status, 5	;RP0=0, select bank0
   514  02FF  1303               	bcf	status, 6	;RP2=0, select bank0
   515                           	
   516  0300  084D               	movf	(0+_rof_send_packet_packet+01h)&07fh,w
   517                           	
   518  0301  120A  118A  21C5   	fcall	_rof_write_byte
              120A  118A         
   519                           	line	19
   520                           ;main.c: 19: rof_write_byte(packet.data);
   521  0306  1283               	bcf	status, 5	;RP0=0, select bank0
   522  0307  1303               	bcf	status, 6	;RP2=0, select bank0
   523                           	
   524  0308  084E               	movf	(0+_rof_send_packet_packet+02h)&07fh,w
   525                           	
   526  0309  120A  118A  21C5   	fcall	_rof_write_byte
              120A  118A         
   527                           	line	20
   528                           ;main.c: 20: _delay((unsigned long)((10)*(20000
                                 000/4000UL)));
   529  030E  1283               	bcf	status, 5	;RP0=0, select bank0
   530  030F  1303               	bcf	status, 6	;RP2=0, select bank0
   531                           	
   532  0310  3041               	movlw	65
   533  0311  00D0               movwf	(??_rof_send_packet+0+0+1),f
   534  0312  30EE               	movlw	238
   535  0313  00CF               movwf	(??_rof_send_packet+0+0),f
   536  0314                     u2197:
   537  0314  0BCF               	decfsz	(??_rof_send_packet+0+0),f
   538  0315  2B14               	goto	u2197
   539  0316  0BD0               	decfsz	(??_rof_send_packet+0+0+1),f
   540  0317  2B14               	goto	u2197
   541  0318  0064               	clrwdt
   542                           
   543                           	line	21
   544                           ;main.c: 21: }
   545  0319                     l34:	
   546  0319  0008               	return
   547                           ; =============== function _rof_send_packet end
                                 s ===============
   548                           
   549                           GLOBAL __end_of_rof_send_packet
   550  031A                     	__end_of_rof_send_packet:
   551                           	FNSIZE	_rof_send_packet,2,3
   552                           	signat	_rof_send_packet,4216
   553                           	global	_uart_send_packet
   554                           	global	??_uart_send_packet
   555                           	global	?_uart_send_packet
   556                           
   557                           ; *************** function _uart_send_packet **
                                 *************
   558                           ; Defined at:
   559                           ;		line 9 in file "../main.c"
   560                           ; Parameters:
   561                           ;		packet      	offs:   0	type: struct packet_t
   562                           ; Auto variables:
   563                           ;		None
   564                           ; Return value:
   565                           ;		type: void 
   566                           ;		size: 0
   567                           ; Registers used:
   568                           ;		wreg, status,2, status,0, pclath, cstack
   569                           ; Tracked objects:
   570                           ;		On entry : 300/0
   571                           ;		On exit  : 0/0
   572                           ;		Unchanged: 0/0
   573                           ; Data sizes:
   574                           ;		Autos:    0
   575                           ;		Params:   3
   576                           ;		Temp:     2
   577                           ;		Total:    5
   578                           ; This function calls:
   579                           ;		_uart_putc
   580                           ;		__delay
   581                           ; This function is called by:
   582                           ;		_main
   583                           ; This function uses a non-reentrant model
   584                           ; 
   585                           	psect	text160,local,class=CODE,delta=2
   586                           	file	"../main.c"
   587                           	line	9
   588                           ;main.c: 9: static void uart_send_packet(struct
                                  packet_t packet) {
   589                           	
   590  033D                     _uart_send_packet:	
   591                           ; Regs used in _uart_send_packet: [wreg+status,
                                 2+status,0+pclath+cstack]
   592                           	line	10
   593                           ;main.c: 10: uart_putc(packet.src_id);
   594                           	
   595  033D  084C               	movf	(_uart_send_packet_packet),w
   596  033E  1383               	bcf	status, 7	;select IRP bank0
   597                           	
   598  033F  120A  118A  23A7   	fcall	_uart_putc
              120A  118A         
   599                           	line	11
   600                           ;main.c: 11: uart_putc(packet.dst_id);
   601  0344  1283               	bcf	status, 5	;RP0=0, select bank0
   602  0345  1303               	bcf	status, 6	;RP2=0, select bank0
   603                           	
   604  0346  084D               	movf	(0+_uart_send_packet_packet+01h)&07fh,w
   605                           	
   606  0347  120A  118A  23A7   	fcall	_uart_putc
              120A  118A         
   607                           	line	12
   608                           ;main.c: 12: uart_putc(packet.data);
   609  034C  1283               	bcf	status, 5	;RP0=0, select bank0
   610  034D  1303               	bcf	status, 6	;RP2=0, select bank0
   611                           	
   612  034E  084E               	movf	(0+_uart_send_packet_packet+02h)&07fh,w
   613                           	
   614  034F  120A  118A  23A7   	fcall	_uart_putc
              120A  118A         
   615                           	line	13
   616                           ;main.c: 13: _delay((unsigned long)((10)*(20000
                                 000/4000UL)));
   617  0354  1283               	bcf	status, 5	;RP0=0, select bank0
   618  0355  1303               	bcf	status, 6	;RP2=0, select bank0
   619                           	
   620  0356  3041               	movlw	65
   621  0357  00D0               movwf	(??_uart_send_packet+0+0+1),f
   622  0358  30EE               	movlw	238
   623  0359  00CF               movwf	(??_uart_send_packet+0+0),f
   624  035A                     u2207:
   625  035A  0BCF               	decfsz	(??_uart_send_packet+0+0),f
   626  035B  2B5A               	goto	u2207
   627  035C  0BD0               	decfsz	(??_uart_send_packet+0+0+1),f
   628  035D  2B5A               	goto	u2207
   629  035E  0064               	clrwdt
   630                           
   631                           	line	14
   632                           ;main.c: 14: }
   633  035F                     l33:	
   634  035F  0008               	return
   635                           ; =============== function _uart_send_packet en
                                 ds ===============
   636                           
   637                           GLOBAL __end_of_uart_send_packet
   638  0360                     	__end_of_uart_send_packet:
   639                           	FNSIZE	_uart_send_packet,2,3
   640                           	signat	_uart_send_packet,4216
   641                           	global	_init
   642                           	global	??_init
   643                           	global	?_init
   644                           
   645                           ; *************** function _init **************
                                 *
   646                           ; Defined at:
   647                           ;		line 17 in file "../init.c"
   648                           ; Parameters:
   649                           ;		None
   650                           ; Auto variables:
   651                           ;		None
   652                           ; Return value:
   653                           ;		type: void 
   654                           ;		size: 0
   655                           ; Registers used:
   656                           ;		wreg, status,2, status,0
   657                           ; Tracked objects:
   658                           ;		On entry : BFF/0
   659                           ;		On exit  : 0/0
   660                           ;		Unchanged: 0/0
   661                           ; Data sizes:
   662                           ;		Autos:    0
   663                           ;		Params:   0
   664                           ;		Temp:     0
   665                           ;		Total:    0
   666                           ; This function calls:
   667                           ;		Nothing
   668                           ; This function is called by:
   669                           ;		_main
   670                           ; This function uses a non-reentrant model
   671                           ; 
   672                           	psect	text161,local,class=CODE,delta=2
   673                           	file	"../init.c"
   674                           	line	17
   675                           ;init.c: 14: asm("\tpsect config,class=CONFIG,d
                                 elta=2"); asm("\tdw ""0x3FFE & 0x3FFB & 0x3FF7 
                                 & 0x3FBF & 0x3F7F & 0x3FFF & 0x3FFF & 0x3FFF & 
                                 0x3FFF");
   676                           ;init.c: 17: void init(void){
   677                           	
   678  01F7                     _init:	
   679                           ; Regs used in _init: [wreg+status,2+status,0]
   680                           	line	21
   681                           ;init.c: 21: OPTION = 0b10000000;
   682  01F7  3080               	movlw	(080h)
   683  01F8  1683               	bsf	status, 5	;RP0=1, select bank1
   684  01F9  1303               	bcf	status, 6	;RP2=0, select bank1
   685                           	
   686  01FA  0081               	movwf	(129)^080h
   687                           	line	27
   688                           ;init.c: 27: PIE1 = 0b01100000;
   689  01FB  3060               	movlw	(060h)
   690                           	
   691  01FC  008C               	movwf	(140)^080h	;volatile
   692                           	line	31
   693                           ;init.c: 31: TRISE = 0b00000111;
   694  01FD  3007               	movlw	(07h)
   695                           	
   696  01FE  0089               	movwf	(137)^080h	;volatile
   697                           	line	35
   698                           ;init.c: 35: TRISA = 0b00101111;
   699  01FF  302F               	movlw	(02Fh)
   700                           	
   701  0200  0085               	movwf	(133)^080h	;volatile
   702                           	line	39
   703                           ;init.c: 39: TRISC = 0b11000000;
   704  0201  30C0               	movlw	(0C0h)
   705                           	
   706  0202  0087               	movwf	(135)^080h	;volatile
   707                           	line	45
   708                           ;init.c: 45: INTCON = 0b01001000;
   709  0203  3048               	movlw	(048h)
   710  0204  1283               	bcf	status, 5	;RP0=0, select bank0
   711  0205  1303               	bcf	status, 6	;RP2=0, select bank0
   712                           	
   713  0206  008B               	movwf	(11)	;volatile
   714                           	line	52
   715                           ;init.c: 52: ADCON0 = 0b10000001;
   716  0207  3081               	movlw	(081h)
   717                           	
   718  0208  009F               	movwf	(31)	;volatile
   719                           	line	57
   720                           ;init.c: 57: ADCON1 = 0b00000000;
   721  0209  1003               	clrc
   722  020A  1683               	bsf	status, 5	;RP0=1, select bank1
   723  020B  1303               	bcf	status, 6	;RP2=0, select bank1
   724                           	
   725  020C  3000               	movlw	0
   726  020D  1803               	btfsc	status,0
   727  020E  3001               	movlw	1
   728  020F  009F               	movwf	(159)^080h	;volatile
   729                           	line	62
   730                           ;init.c: 62: TRISB = 0b11110011;
   731  0210  30F3               	movlw	(0F3h)
   732                           	
   733  0211  0086               	movwf	(134)^080h	;volatile
   734                           	line	67
   735                           ;init.c: 67: TRISD = 0b00000000;
   736  0212  1003               	clrc
   737                           	
   738  0213  3000               	movlw	0
   739  0214  1803               	btfsc	status,0
   740  0215  3001               	movlw	1
   741  0216  0088               	movwf	(136)^080h	;volatile
   742                           	line	75
   743                           ;init.c: 75: TXSTA = 0b00100100;
   744  0217  3024               	movlw	(024h)
   745                           	
   746  0218  0098               	movwf	(152)^080h	;volatile
   747                           	line	81
   748                           ;init.c: 81: RCSTA = 0b10010000;
   749  0219  3090               	movlw	(090h)
   750  021A  1283               	bcf	status, 5	;RP0=0, select bank0
   751  021B  1303               	bcf	status, 6	;RP2=0, select bank0
   752                           	
   753  021C  0098               	movwf	(24)	;volatile
   754                           	line	85
   755                           ;init.c: 85: SPBRG = 0b10000001;
   756  021D  3081               	movlw	(081h)
   757  021E  1683               	bsf	status, 5	;RP0=1, select bank1
   758  021F  1303               	bcf	status, 6	;RP2=0, select bank1
   759                           	
   760  0220  0099               	movwf	(153)^080h	;volatile
   761                           	line	87
   762                           ;init.c: 87: (GIE = 1);
   763  0221  1283               	bcf	status, 5	;RP0=0, select bank0
   764  0222  1303               	bcf	status, 6	;RP2=0, select bank0
   765  0223  178B               	bsf	(95/8),(95)&7
   766                           	line	89
   767                           ;init.c: 89: }
   768  0224                     l49:	
   769  0224  0008               	return
   770                           ; =============== function _init ends =========
                                 ======
   771                           
   772                           GLOBAL __end_of_init
   773  0225                     	__end_of_init:
   774                           	FNSIZE	_init,0,0
   775                           	signat	_init,88
   776                           	global	_rof_init
   777                           	global	??_rof_init
   778                           	global	?_rof_init
   779                           
   780                           ; *************** function _rof_init **********
                                 *****
   781                           ; Defined at:
   782                           ;		line 14 in file "../rof.c"
   783                           ; Parameters:
   784                           ;		None
   785                           ; Auto variables:
   786                           ;		None
   787                           ; Return value:
   788                           ;		type: void 
   789                           ;		size: 0
   790                           ; Registers used:
   791                           ;		None
   792                           ; Tracked objects:
   793                           ;		On entry : 0/0
   794                           ;		On exit  : 0/0
   795                           ;		Unchanged: 0/0
   796                           ; Data sizes:
   797                           ;		Autos:    0
   798                           ;		Params:   0
   799                           ;		Temp:     0
   800                           ;		Total:    0
   801                           ; This function calls:
   802                           ;		Nothing
   803                           ; This function is called by:
   804                           ;		_main
   805                           ; This function uses a non-reentrant model
   806                           ; 
   807                           	psect	text162,local,class=CODE,delta=2
   808                           	file	"../rof.c"
   809                           	line	14
   810                           ;rof.c: 9: static volatile unsigned char bitcou
                                 nt = 0;
   811                           ;rof.c: 10: static volatile unsigned char data 
                                 = 0;
   812                           ;rof.c: 11: static volatile unsigned char index
                                  = 0;
   813                           ;rof.c: 12: static struct packet_t entry;
   814                           ;rof.c: 14: void rof_init() {
   815                           	
   816  03BB                     _rof_init:	
   817                           ; Regs used in _rof_init: []
   818                           	line	15
   819                           ;rof.c: 15: RB2 = 0;
   820  03BB  1283               	bcf	status, 5	;RP0=0, select bank0
   821  03BC  1303               	bcf	status, 6	;RP2=0, select bank0
   822  03BD  1106               	bcf	(50/8),(50)&7
   823                           	line	16
   824                           ;rof.c: 16: RB3 = 0;
   825  03BE  1186               	bcf	(51/8),(51)&7
   826                           	line	17
   827                           ;rof.c: 17: INTE = 1;
   828  03BF  160B               	bsf	(92/8),(92)&7
   829                           	line	18
   830                           ;rof.c: 18: }
   831  03C0                     l20:	
   832  03C0  0008               	return
   833                           ; =============== function _rof_init ends =====
                                 ==========
   834                           
   835                           GLOBAL __end_of_rof_init
   836  03C1                     	__end_of_rof_init:
   837                           	FNSIZE	_rof_init,0,0
   838                           	signat	_rof_init,88
   839                           	global	_adc_advance
   840                           	global	??_adc_advance
   841                           	global	?_adc_advance
   842                           
   843                           ; *************** function _adc_advance *******
                                 ********
   844                           ; Defined at:
   845                           ;		line 17 in file "../adc.c"
   846                           ; Parameters:
   847                           ;		None
   848                           ; Auto variables:
   849                           ;		None
   850                           ; Return value:
   851                           ;		type: void 
   852                           ;		size: 0
   853                           ; Registers used:
   854                           ;		wreg, status,2, status,0
   855                           ; Tracked objects:
   856                           ;		On entry : 300/0
   857                           ;		On exit  : 0/0
   858                           ;		Unchanged: 0/0
   859                           ; Data sizes:
   860                           ;		Autos:    0
   861                           ;		Params:   0
   862                           ;		Temp:     1
   863                           ;		Total:    1
   864                           ; This function calls:
   865                           ;		Nothing
   866                           ; This function is called by:
   867                           ;		_main
   868                           ; This function uses a non-reentrant model
   869                           ; 
   870                           	psect	text163,local,class=CODE,delta=2
   871                           	file	"../adc.c"
   872                           	line	17
   873                           ;adc.c: 8: static unsigned char values[] = { 0,
                                  0, 0, 0, 0, 0, 0, 0 };
   874                           ;adc.c: 15: static unsigned char adc_channel = 
                                 0;
   875                           ;adc.c: 17: void adc_advance(void) {
   876                           	
   877  03B2                     _adc_advance:	
   878                           ; Regs used in _adc_advance: [wreg+status,2+sta
                                 tus,0]
   879                           	line	18
   880                           ;adc.c: 18: adc_channel++;
   881  03B2  3001               	movlw	(01h)
   882  03B3  00CC               	movwf	(??_adc_advance+0+0)
   883                           	
   884  03B4  084C               	movf	(??_adc_advance+0+0),w
   885  03B5  07F0               	addwf	(112),f
   886                           	line	19
   887                           ;adc.c: 19: adc_channel &= 0x07;
   888  03B6  3007               	movlw	(07h)
   889  03B7  00CC               	movwf	(??_adc_advance+0+0)
   890                           	
   891  03B8  084C               	movf	(??_adc_advance+0+0),w
   892  03B9  05F0               	andwf	(112),f
   893                           	line	20
   894                           ;adc.c: 20: }
   895  03BA                     l64:	
   896  03BA  0008               	return
   897                           ; =============== function _adc_advance ends ==
                                 =============
   898                           
   899                           GLOBAL __end_of_adc_advance
   900  03BB                     	__end_of_adc_advance:
   901                           	FNSIZE	_adc_advance,1,0
   902                           	signat	_adc_advance,88
   903                           	global	_adc_read
   904                           	global	??_adc_read
   905                           	global	?_adc_read
   906                           
   907                           ; *************** function _adc_read **********
                                 *****
   908                           ; Defined at:
   909                           ;		line 22 in file "../adc.c"
   910                           ; Parameters:
   911                           ;		None
   912                           ; Auto variables:
   913                           ;		None
   914                           ; Return value:
   915                           ;		type: void 
   916                           ;		size: 0
   917                           ; Registers used:
   918                           ;		wreg, status,2, status,0
   919                           ; Tracked objects:
   920                           ;		On entry : 0/0
   921                           ;		On exit  : 0/0
   922                           ;		Unchanged: 0/0
   923                           ; Data sizes:
   924                           ;		Autos:    0
   925                           ;		Params:   0
   926                           ;		Temp:     2
   927                           ;		Total:    2
   928                           ; This function calls:
   929                           ;		__delay
   930                           ; This function is called by:
   931                           ;		_main
   932                           ; This function uses a non-reentrant model
   933                           ; 
   934                           	psect	text164,local,class=CODE,delta=2
   935                           	file	"../adc.c"
   936                           	line	22
   937                           ;adc.c: 22: void adc_read(void) {
   938                           	
   939  031A                     _adc_read:	
   940                           ; Regs used in _adc_read: [wreg+status,2+status
                                 ,0]
   941                           	line	23
   942                           ;adc.c: 23: ADCON0 &= ~(0x07 << 3);
   943  031A  30C7               	movlw	(0C7h)
   944  031B  1283               	bcf	status, 5	;RP0=0, select bank0
   945  031C  1303               	bcf	status, 6	;RP2=0, select bank0
   946  031D  00CC               	movwf	(??_adc_read+0+0)
   947                           	
   948  031E  084C               	movf	(??_adc_read+0+0),w
   949  031F  059F               	andwf	(31),f	;volatile
   950                           	line	24
   951                           ;adc.c: 24: ADCON0 |= (adc_channel << 3);
   952                           	
   953  0320  0870               	movf	(112),w
   954                           	
   955  0321  00CC               	movwf	(??_adc_read+0+0)
   956  0322  3002               	movlw	(03h)-1
   957  0323                     u2185:
   958  0323  1003               	clrc
   959  0324  0DCC               	rlf	(??_adc_read+0+0),f
   960  0325  3EFF               	addlw	-1
   961  0326  1D03               	skipz
   962  0327  2B23               	goto	u2185
   963  0328  1003               	clrc
   964  0329  0D4C               	rlf	(??_adc_read+0+0),w
   965  032A  00CD               	movwf	(??_adc_read+1+0)
   966                           	
   967  032B  084D               	movf	(??_adc_read+1+0),w
   968  032C  049F               	iorwf	(31),f	;volatile
   969                           	line	25
   970                           ;adc.c: 25: ADIF = 0;
   971  032D  130C               	bcf	(102/8),(102)&7
   972                           	line	26
   973                           ;adc.c: 26: ADIE = 1;
   974  032E  1683               	bsf	status, 5	;RP0=1, select bank1
   975  032F  1303               	bcf	status, 6	;RP2=0, select bank1
   976  0330  170C               	bsf	(1126/8)^080h,(1126)&7
   977                           	line	27
   978                           ;adc.c: 27: PEIE = 1;
   979  0331  1283               	bcf	status, 5	;RP0=0, select bank0
   980  0332  1303               	bcf	status, 6	;RP2=0, select bank0
   981  0333  170B               	bsf	(94/8),(94)&7
   982                           	line	28
   983                           ;adc.c: 28: GIE = 1;
   984  0334  178B               	bsf	(95/8),(95)&7
   985                           	line	29
   986                           ;adc.c: 29: _delay((unsigned long)((20)*(200000
                                 00/4000000UL)));
   987                           	
   988  0335  3021               	movlw	33
   989  0336  00CC               movwf	(??_adc_read+0+0),f
   990  0337                     u2217:
   991  0337  0BCC               decfsz	(??_adc_read+0+0),f
   992  0338  2B37               	goto	u2217
   993                           
   994                           	line	30
   995                           ;adc.c: 30: ADGO = 1;
   996  0339  1283               	bcf	status, 5	;RP0=0, select bank0
   997  033A  1303               	bcf	status, 6	;RP2=0, select bank0
   998  033B  151F               	bsf	(250/8),(250)&7
   999                           	line	31
  1000                           ;adc.c: 31: }
  1001  033C                     l65:	
  1002  033C  0008               	return
  1003                           ; =============== function _adc_read ends =====
                                 ==========
  1004                           
  1005                           GLOBAL __end_of_adc_read
  1006  033D                     	__end_of_adc_read:
  1007                           	FNSIZE	_adc_read,2,0
  1008                           	signat	_adc_read,88
  1009                           	global	_rof_write_byte
  1010                           	global	??_rof_write_byte
  1011                           	global	?_rof_write_byte
  1012                           
  1013                           ; *************** function _rof_write_byte ****
                                 ***********
  1014                           ; Defined at:
  1015                           ;		line 42 in file "../rof.c"
  1016                           ; Parameters:
  1017                           ;		data        	reg:   wr	type: unsigned char 
  1018                           ; Auto variables:
  1019                           ;		data        	       	type: unsigned char 
  1020                           ;		i           	       	type: unsigned char 
  1021                           ; Return value:
  1022                           ;		type: void 
  1023                           ;		size: 0
  1024                           ; Registers used:
  1025                           ;		wreg, status,2, status,0
  1026                           ; Tracked objects:
  1027                           ;		On entry : 300/0
  1028                           ;		On exit  : 0/0
  1029                           ;		Unchanged: 0/0
  1030                           ; Data sizes:
  1031                           ;		Autos:    2
  1032                           ;		Params:   0
  1033                           ;		Temp:     1
  1034                           ;		Total:    3
  1035                           ; This function calls:
  1036                           ;		__delay
  1037                           ; This function is called by:
  1038                           ;		_rof_send_packet
  1039                           ; This function uses a non-reentrant model
  1040                           ; 
  1041                           	psect	text165,local,class=CODE,delta=2
  1042                           	file	"../rof.c"
  1043                           	line	42
  1044                           ;rof.c: 42: void rof_write_byte(unsigned char d
                                 ata) {
  1045                           	
  1046  01C5                     _rof_write_byte:	
  1047                           ; Regs used in _rof_write_byte: [wreg+status,2+
                                 status,0]
  1048                           ;_rof_write_byte_data stored from wreg
  1049                           	line	45
  1050                           	
  1051  01C5  00D1               	movwf	(_rof_write_byte_data)
  1052                           ;rof.c: 43: unsigned char i;
  1053                           ;rof.c: 45: for(i = 0; i < 8; i++) {
  1054  01C6  1003               	clrc
  1055                           	
  1056  01C7  3000               	movlw	0
  1057  01C8  1803               	btfsc	status,0
  1058  01C9  3001               	movlw	1
  1059  01CA  00D2               	movwf	(_rof_write_byte_i)
  1060  01CB  29CC               	goto	l30
  1061                           	
  1062  01CC                     l30:	
  1063                           	line	46
  1064                           ;rof.c: 46: RB3 = data & 0x01;
  1065                           	
  1066  01CC  1851               	btfsc	(_rof_write_byte_data),0
  1067  01CD  29CF               	goto	u1831
  1068  01CE  29D3               	goto	u1830
  1069                           	
  1070  01CF                     u1831:
  1071  01CF  1283               	bcf	status, 5	;RP0=0, select bank0
  1072  01D0  1303               	bcf	status, 6	;RP2=0, select bank0
  1073  01D1  1586               	bsf	(51/8),(51)&7
  1074  01D2  29D6               	goto	u1844
  1075  01D3                     u1830:
  1076  01D3  1283               	bcf	status, 5	;RP0=0, select bank0
  1077  01D4  1303               	bcf	status, 6	;RP2=0, select bank0
  1078  01D5  1186               	bcf	(51/8),(51)&7
  1079  01D6                     u1844:
  1080                           	line	47
  1081                           ;rof.c: 47: data >>= 1;
  1082                           	
  1083  01D6  1003               	clrc
  1084  01D7  0CD1               	rrf	(_rof_write_byte_data),f
  1085                           
  1086                           	line	48
  1087                           ;rof.c: 48: _delay((unsigned long)((50)*(200000
                                 00/4000000UL)));
  1088                           	
  1089  01D8  3053               	movlw	83
  1090  01D9  00D3               movwf	(??_rof_write_byte+2+0),f
  1091  01DA                     u2227:
  1092  01DA  0BD3               decfsz	(??_rof_write_byte+2+0),f
  1093  01DB  29DA               	goto	u2227
  1094                           
  1095                           	line	49
  1096                           ;rof.c: 49: RB2 = 1;
  1097  01DC  1283               	bcf	status, 5	;RP0=0, select bank0
  1098  01DD  1303               	bcf	status, 6	;RP2=0, select bank0
  1099  01DE  1506               	bsf	(50/8),(50)&7
  1100                           	line	50
  1101                           ;rof.c: 50: _delay((unsigned long)((50)*(200000
                                 00/4000000UL)));
  1102                           	
  1103  01DF  3053               	movlw	83
  1104  01E0  00D3               movwf	(??_rof_write_byte+2+0),f
  1105  01E1                     u2237:
  1106  01E1  0BD3               decfsz	(??_rof_write_byte+2+0),f
  1107  01E2  29E1               	goto	u2237
  1108                           
  1109                           	line	51
  1110                           ;rof.c: 51: RB2 = 0;
  1111  01E3  1283               	bcf	status, 5	;RP0=0, select bank0
  1112  01E4  1303               	bcf	status, 6	;RP2=0, select bank0
  1113  01E5  1106               	bcf	(50/8),(50)&7
  1114                           	line	52
  1115                           ;rof.c: 52: _delay((unsigned long)((50)*(200000
                                 00/4000000UL)));
  1116                           	
  1117  01E6  3053               	movlw	83
  1118  01E7  00D3               movwf	(??_rof_write_byte+2+0),f
  1119  01E8                     u2247:
  1120  01E8  0BD3               decfsz	(??_rof_write_byte+2+0),f
  1121  01E9  29E8               	goto	u2247
  1122                           
  1123                           	line	45
  1124  01EA  3001               	movlw	(01h)
  1125  01EB  1283               	bcf	status, 5	;RP0=0, select bank0
  1126  01EC  1303               	bcf	status, 6	;RP2=0, select bank0
  1127  01ED  00D3               	movwf	(??_rof_write_byte+2+0)
  1128                           	
  1129  01EE  0853               	movf	(??_rof_write_byte+2+0),w
  1130  01EF  07D2               	addwf	(_rof_write_byte_i),f
  1131  01F0  3008               	movlw	(08h)
  1132                           	
  1133  01F1  0252               	subwf	(_rof_write_byte_i),w
  1134  01F2  1C03               	skipc
  1135  01F3  29F5               	goto	u1851
  1136  01F4  29F6               	goto	u1850
  1137  01F5                     u1851:
  1138  01F5  29CC               	goto	l30
  1139  01F6                     u1850:
  1140                           	
  1141  01F6                     l31:	
  1142                           	line	54
  1143                           ;rof.c: 53: }
  1144                           ;rof.c: 54: }
  1145  01F6                     l29:	
  1146  01F6  0008               	return
  1147                           ; =============== function _rof_write_byte ends
                                  ===============
  1148                           
  1149                           GLOBAL __end_of_rof_write_byte
  1150  01F7                     	__end_of_rof_write_byte:
  1151                           	FNSIZE	_rof_write_byte,3,0
  1152                           	signat	_rof_write_byte,4216
  1153                           	global	_uart_putc
  1154                           	global	??_uart_putc
  1155                           	global	?_uart_putc
  1156                           
  1157                           ; *************** function _uart_putc *********
                                 ******
  1158                           ; Defined at:
  1159                           ;		line 8 in file "../uart.c"
  1160                           ; Parameters:
  1161                           ;		byte        	reg:   wr	type: unsigned char 
  1162                           ; Auto variables:
  1163                           ;		byte        	       	type: unsigned char 
  1164                           ; Return value:
  1165                           ;		type: void 
  1166                           ;		size: 0
  1167                           ; Registers used:
  1168                           ;		wreg
  1169                           ; Tracked objects:
  1170                           ;		On entry : 300/0
  1171                           ;		On exit  : 0/0
  1172                           ;		Unchanged: 0/0
  1173                           ; Data sizes:
  1174                           ;		Autos:    1
  1175                           ;		Params:   0
  1176                           ;		Temp:     0
  1177                           ;		Total:    1
  1178                           ; This function calls:
  1179                           ;		Nothing
  1180                           ; This function is called by:
  1181                           ;		_uart_send_packet
  1182                           ; This function uses a non-reentrant model
  1183                           ; 
  1184                           	psect	text166,local,class=CODE,delta=2
  1185                           	file	"../uart.c"
  1186                           	line	8
  1187                           ;uart.c: 6: static volatile unsigned char index
                                  = 0;
  1188                           ;uart.c: 8: void uart_putc(unsigned char byte) 
                                 {
  1189                           	
  1190  03A7                     _uart_putc:	
  1191                           ; Regs used in _uart_putc: [wreg]
  1192                           ;_uart_putc_byte stored from wreg
  1193                           	
  1194  03A7  00D1               	movwf	(_uart_putc_byte)
  1195                           	line	9
  1196                           ;uart.c: 9: while (!TXIF) {
  1197  03A8  2BAA               	goto	l3
  1198                           	
  1199  03A9                     l4:	
  1200                           	line	10
  1201                           ;uart.c: 10: continue;
  1202  03A9  2BAA               	goto	l3
  1203                           	line	11
  1204                           	
  1205  03AA                     l3:	
  1206                           	line	9
  1207  03AA  1E0C               	btfss	(100/8),(100)&7
  1208  03AB  2BAD               	goto	u1791
  1209  03AC  2BAE               	goto	u1790
  1210  03AD                     u1791:
  1211  03AD  2BA9               	goto	l4
  1212  03AE                     u1790:
  1213                           	
  1214  03AE                     l5:	
  1215                           	line	12
  1216                           ;uart.c: 11: }
  1217                           ;uart.c: 12: TXREG = byte;
  1218                           	
  1219  03AE  0851               	movf	(_uart_putc_byte),w
  1220  03AF  1383               	bcf	status, 7	;select IRP bank0
  1221                           	
  1222                           	
  1223  03B0  0099               	movwf	(25)	;volatile
  1224                           	line	13
  1225                           ;uart.c: 13: }
  1226  03B1                     l2:	
  1227  03B1  0008               	return
  1228                           ; =============== function _uart_putc ends ====
                                 ===========
  1229                           
  1230                           GLOBAL __end_of_uart_putc
  1231  03B2                     	__end_of_uart_putc:
  1232                           	FNSIZE	_uart_putc,1,0
  1233                           	signat	_uart_putc,4216
  1234                           	global	___wmul
  1235                           	global	??___wmul
  1236                           	global	?___wmul
  1237                           
  1238                           ; *************** function ___wmul ************
                                 ***
  1239                           ; Defined at:
  1240                           ;		line 3 in file "/usr/hitech/picc/pro/9.60PL5
                                 /sources/wmul.c"
  1241                           ; Parameters:
  1242                           ;		multiplier  	offs:   0	type: unsigned int 
  1243                           ;		multiplicand	offs:   2	type: unsigned int 
  1244                           ; Auto variables:
  1245                           ;		product     	       	type: unsigned int 
  1246                           ; Return value:
  1247                           ;		type: unsigned int 
  1248                           ;		size: 2
  1249                           ; Registers used:
  1250                           ;		wreg, status,2, status,0
  1251                           ; Tracked objects:
  1252                           ;		On entry : 0/0
  1253                           ;		On exit  : 0/0
  1254                           ;		Unchanged: 0/0
  1255                           ; Data sizes:
  1256                           ;		Autos:    2
  1257                           ;		Params:   4
  1258                           ;		Temp:     0
  1259                           ;		Total:    6
  1260                           ; This function calls:
  1261                           ;		Nothing
  1262                           ; This function is called by:
  1263                           ;		_in_push
  1264                           ;		_in_pop
  1265                           ; This function uses a non-reentrant model
  1266                           ; 
  1267                           	psect	text167,local,class=CODE,delta=2
  1268                           	file	"/usr/hitech/picc/pro/9.60PL5/sources/wmu
                                 l.c"
  1269                           	line	3
  1270                           	
  1271  0225                     ___wmul:	
  1272                           ; Regs used in ___wmul: [wreg+status,2+status,0
                                 ]
  1273                           	line	4
  1274  0225  3000               	movlw	low(0)
  1275  0226  1283               	bcf	status, 5	;RP0=0, select bank0
  1276  0227  1303               	bcf	status, 6	;RP2=0, select bank0
  1277                           	
  1278  0228  00D7               	movwf	(___wmul_product)
  1279  0229  3000               	movlw	high(0)
  1280  022A  00D8               	movwf	((___wmul_product))+1
  1281                           	line	6
  1282                           	
  1283  022B                     l78:	
  1284                           	line	7
  1285                           	
  1286  022B  1C53               	btfss	(___wmul_multiplier),(0)&7
  1287  022C  2A2E               	goto	u2091
  1288  022D  2A2F               	goto	u2090
  1289  022E                     u2091:
  1290  022E  2A35               	goto	l79
  1291  022F                     u2090:
  1292                           	line	8
  1293                           	
  1294                           	
  1295  022F  0855               	movf	(___wmul_multiplicand),w
  1296  0230  07D7               	addwf	(___wmul_product),f
  1297  0231  1803               	skipnc
  1298  0232  0AD8               	incf	(___wmul_product+1),f
  1299  0233  0856               	movf	(___wmul_multiplicand+1),w
  1300  0234  07D8               	addwf	(___wmul_product+1),f
  1301                           	
  1302  0235                     l79:	
  1303                           	line	9
  1304                           	
  1305  0235  3001               	movlw	01h
  1306  0236                     u2105:
  1307  0236  1003               	clrc
  1308  0237  0DD5               	rlf	(___wmul_multiplicand),f
  1309  0238  0DD6               	rlf	(___wmul_multiplicand+1),f
  1310  0239  3EFF               	addlw	-1
  1311  023A  1D03               	skipz
  1312  023B  2A36               	goto	u2105
  1313                           	line	10
  1314                           	
  1315  023C  3001               	movlw	01h
  1316  023D                     u2115:
  1317  023D  1003               	clrc
  1318  023E  0CD4               	rrf	(___wmul_multiplier+1),f
  1319  023F  0CD3               	rrf	(___wmul_multiplier),f
  1320  0240  3EFF               	addlw	-1
  1321  0241  1D03               	skipz
  1322  0242  2A3D               	goto	u2115
  1323                           	line	11
  1324                           	
  1325  0243  0854               	movf	((___wmul_multiplier+1))&07fh,w
  1326  0244  0453               	iorwf	((___wmul_multiplier))&07fh,w
  1327  0245  1D03               	skipz
  1328  0246  2A48               	goto	u2121
  1329  0247  2A49               	goto	u2120
  1330  0248                     u2121:
  1331  0248  2A2B               	goto	l78
  1332  0249                     u2120:
  1333                           	
  1334  0249                     l77:	
  1335                           	line	12
  1336                           	
  1337                           	
  1338  0249  0857               	movf	(___wmul_product),w
  1339  024A  01D3               	clrf	(?___wmul)
  1340  024B  07D3               	addwf	(?___wmul)
  1341  024C  0858               	movf	(___wmul_product+1),w
  1342  024D  01D4               	clrf	(?___wmul+1)
  1343  024E  07D4               	addwf	(?___wmul+1)
  1344  024F  2A50               	goto	l75
  1345                           	line	13
  1346  0250                     l75:	
  1347  0250  0008               	return
  1348                           ; =============== function ___wmul ends =======
                                 ========
  1349                           
  1350                           GLOBAL __end_of___wmul
  1351  0251                     	__end_of___wmul:
  1352                           	FNSIZE	___wmul,2,4
  1353                           	signat	___wmul,8314
  1354                           	global	___bmul
  1355                           	global	??___bmul
  1356                           	global	?___bmul
  1357                           
  1358                           ; *************** function ___bmul ************
                                 ***
  1359                           ; Defined at:
  1360                           ;		line 3 in file "bmul.c"
  1361                           ; Parameters:
  1362                           ;		multiplier  	reg:   wr	type: unsigned char 
  1363                           ;		multiplicand	offs:   0	type: unsigned char 
  1364                           ; Auto variables:
  1365                           ;		multiplier  	       	type: unsigned char 
  1366                           ;		product     	       	type: unsigned char 
  1367                           ; Return value:
  1368                           ;		type: unsigned char 
  1369                           ;		size: 1
  1370                           ; Registers used:
  1371                           ;		wreg, status,2, status,0
  1372                           ; Tracked objects:
  1373                           ;		On entry : 300/0
  1374                           ;		On exit  : 0/0
  1375                           ;		Unchanged: 0/0
  1376                           ; Data sizes:
  1377                           ;		Autos:    2
  1378                           ;		Params:   1
  1379                           ;		Temp:     1
  1380                           ;		Total:    4
  1381                           ; This function calls:
  1382                           ;		Nothing
  1383                           ; This function is called by:
  1384                           ;		_in_push
  1385                           ;		_in_pop
  1386                           ; This function uses a non-reentrant model
  1387                           ; 
  1388                           	psect	text168,local,class=CODE,delta=2
  1389                           	file	"/usr/hitech/picc/pro/9.60PL5/sources/bmu
                                 l.c"
  1390                           	line	3
  1391                           	
  1392  037C                     ___bmul:	
  1393                           ; Regs used in ___bmul: [wreg+status,2+status,0
                                 ]
  1394                           ;___bmul_multiplier stored from wreg
  1395                           	
  1396  037C  00D4               	movwf	(___bmul_multiplier)
  1397                           	line	4
  1398  037D  1003               	clrc
  1399                           	
  1400  037E  3000               	movlw	0
  1401  037F  1803               	btfsc	status,0
  1402  0380  3001               	movlw	1
  1403  0381  00D5               	movwf	(___bmul_product)
  1404                           	line	6
  1405                           	
  1406  0382                     l73:	
  1407                           	line	7
  1408                           	
  1409  0382  1C54               	btfss	(___bmul_multiplier),(0)&7
  1410  0383  2B85               	goto	u751
  1411  0384  2B86               	goto	u750
  1412  0385                     u751:
  1413  0385  2B8B               	goto	l74
  1414  0386                     u750:
  1415                           	line	8
  1416                           	
  1417  0386  0853               	movf	(___bmul_multiplicand),w
  1418  0387  1383               	bcf	status, 7	;select IRP bank0
  1419                           	
  1420  0388  00D6               	movwf	(??___bmul+2+0)
  1421                           	
  1422  0389  0856               	movf	(??___bmul+2+0),w
  1423  038A  07D5               	addwf	(___bmul_product),f
  1424                           	
  1425  038B                     l74:	
  1426                           	line	9
  1427                           	
  1428  038B  1003               	clrc
  1429  038C  0DD3               	rlf	(___bmul_multiplicand),f
  1430                           
  1431                           	line	10
  1432                           	
  1433  038D  1003               	clrc
  1434  038E  0CD4               	rrf	(___bmul_multiplier),f
  1435                           
  1436                           	line	11
  1437                           	
  1438  038F  08D4               	movf	(___bmul_multiplier),f
  1439  0390  1D03               	skipz
  1440  0391  2B93               	goto	u761
  1441  0392  2B94               	goto	u760
  1442  0393                     u761:
  1443  0393  2B82               	goto	l73
  1444  0394                     u760:
  1445                           	
  1446  0394                     l72:	
  1447                           	line	12
  1448                           	
  1449  0394  0855               	movf	(___bmul_product),w
  1450  0395  1383               	bcf	status, 7	;select IRP bank0
  1451                           	
  1452  0396  2B97               	goto	l70
  1453                           	line	13
  1454  0397                     l70:	
  1455  0397  0008               	return
  1456                           ; =============== function ___bmul ends =======
                                 ========
  1457                           
  1458                           GLOBAL __end_of___bmul
  1459  0398                     	__end_of___bmul:
  1460                           	FNSIZE	___bmul,3,1
  1461                           	signat	___bmul,8313
  1462                           	global	_my_isr
  1463                           	global	??_my_isr
  1464                           	global	?_my_isr
  1465                           
  1466                           ; *************** function _my_isr ************
                                 ***
  1467                           ; Defined at:
  1468                           ;		line 9 in file "../isr.c"
  1469                           ; Parameters:
  1470                           ;		None
  1471                           ; Auto variables:
  1472                           ;		None
  1473                           ; Return value:
  1474                           ;		type: void 
  1475                           ;		size: 0
  1476                           ; Registers used:
  1477                           ;		wreg, fsr, status,2, status,0, pclath, cstac
                                 k
  1478                           ; Tracked objects:
  1479                           ;		On entry : 300/0
  1480                           ;		On exit  : 0/0
  1481                           ;		Unchanged: 0/0
  1482                           ; Data sizes:
  1483                           ;		Autos:    0
  1484                           ;		Params:   0
  1485                           ;		Temp:     4
  1486                           ;		Total:    4
  1487                           ; This function calls:
  1488                           ;		_adc_interrupt
  1489                           ;		_sb_interrupt
  1490                           ;		_uart_interrupt
  1491                           ;		_rof_interrupt
  1492                           ; This function is called by:
  1493                           ;		Interrupt level 1
  1494                           ; This function uses a non-reentrant model
  1495                           ; 
  1496                           	psect	intrtext,class=CODE,delta=2
  1497                           	file	"../isr.c"
  1498                           	line	9
  1499                           ;isr.c: 9: void interrupt my_isr(void){
  1500                           	
  1501  0094                     _my_isr:	
  1502                           ; Regs used in _my_isr: [wreg+fsr+status,2+stat
                                 us,0+pclath+cstack]
  1503                           	psect	intentry,class=CODE,delta=2
  1504                           global interrupt_function
  1505  0004                     interrupt_function:
  1506                           	global saved_w
  1507  0000                     	saved_w	set	btemp+1
  1508  0004  00FF               	movwf	saved_w
  1509  0005  0803               	movf	status,w
  1510  0006  1283               	bcf	status, 5	;RP0=0, select bank0
  1511  0007  1303               	bcf	status, 6	;RP2=0, select bank0
  1512  0008  00D9               	movwf	(??_my_isr+0)
  1513  0009  0804               	movf	fsr,w
  1514  000A  00DA               	movwf	(??_my_isr+1)
  1515  000B  080A               	movf	pclath,w
  1516  000C  00DB               	movwf	(??_my_isr+2)
  1517  000D  087E               	movf	btemp+0,w
  1518  000E  00DC               	movwf	(??_my_isr+3)
  1519  000F  120A  118A  2894   	ljmp	_my_isr
  1520                           	psect	intrtext
  1521                           	line	12
  1522                           ;isr.c: 12: if((ADIE)&&(ADIF)){
  1523  0094  1683               	bsf	status, 5	;RP0=1, select bank1
  1524  0095  1303               	bcf	status, 6	;RP2=0, select bank1
  1525  0096  1F0C               	btfss	(1126/8)^080h,(1126)&7
  1526  0097  2899               	goto	i1u1911
  1527  0098  289A               	goto	i1u1910
  1528  0099                     i1u1911:
  1529  0099  28A8               	goto	i1l45
  1530  009A                     i1u1910:
  1531  009A  1283               	bcf	status, 5	;RP0=0, select bank0
  1532  009B  1303               	bcf	status, 6	;RP2=0, select bank0
  1533  009C  1F0C               	btfss	(102/8),(102)&7
  1534  009D  289F               	goto	i1u1921
  1535  009E  28A0               	goto	i1u1920
  1536  009F                     i1u1921:
  1537  009F  28A8               	goto	i1l45
  1538  00A0                     i1u1920:
  1539                           	line	13
  1540                           ;isr.c: 13: adc_interrupt();
  1541  00A0  120A  118A  213D   	fcall	_adc_interrupt
              120A  118A         
  1542                           	line	14
  1543                           ;isr.c: 14: ADIF=0;
  1544  00A5  1283               	bcf	status, 5	;RP0=0, select bank0
  1545  00A6  1303               	bcf	status, 6	;RP2=0, select bank0
  1546  00A7  130C               	bcf	(102/8),(102)&7
  1547                           	line	15
  1548                           	
  1549  00A8                     i1l45:	
  1550                           	line	18
  1551                           ;isr.c: 15: }
  1552                           ;isr.c: 18: if((RBIE)&&(RBIF)){
  1553  00A8  1283               	bcf	status, 5	;RP0=0, select bank0
  1554  00A9  1D8B               	btfss	(91/8),(91)&7
  1555  00AA  28AC               	goto	i1u1931
  1556  00AB  28AD               	goto	i1u1930
  1557  00AC                     i1u1931:
  1558  00AC  28B9               	goto	i1l46
  1559  00AD                     i1u1930:
  1560  00AD  1C0B               	btfss	(88/8),(88)&7
  1561  00AE  28B0               	goto	i1u1941
  1562  00AF  28B1               	goto	i1u1940
  1563  00B0                     i1u1941:
  1564  00B0  28B9               	goto	i1l46
  1565  00B1                     i1u1940:
  1566                           	line	19
  1567                           ;isr.c: 19: sb_interrupt();
  1568  00B1  120A  118A  227D   	fcall	_sb_interrupt
              120A  118A         
  1569                           	line	20
  1570                           ;isr.c: 20: RBIF=0;
  1571  00B6  1283               	bcf	status, 5	;RP0=0, select bank0
  1572  00B7  1303               	bcf	status, 6	;RP2=0, select bank0
  1573  00B8  100B               	bcf	(88/8),(88)&7
  1574                           	line	21
  1575                           	
  1576  00B9                     i1l46:	
  1577                           	line	24
  1578                           ;isr.c: 21: }
  1579                           ;isr.c: 24: if((RCIE)&&(RCIF)){
  1580  00B9  1683               	bsf	status, 5	;RP0=1, select bank1
  1581  00BA  1303               	bcf	status, 6	;RP2=0, select bank1
  1582  00BB  1E8C               	btfss	(1125/8)^080h,(1125)&7
  1583  00BC  28BE               	goto	i1u1951
  1584  00BD  28BF               	goto	i1u1950
  1585  00BE                     i1u1951:
  1586  00BE  28CD               	goto	i1l47
  1587  00BF                     i1u1950:
  1588  00BF  1283               	bcf	status, 5	;RP0=0, select bank0
  1589  00C0  1303               	bcf	status, 6	;RP2=0, select bank0
  1590  00C1  1E8C               	btfss	(101/8),(101)&7
  1591  00C2  28C4               	goto	i1u1961
  1592  00C3  28C5               	goto	i1u1960
  1593  00C4                     i1u1961:
  1594  00C4  28CD               	goto	i1l47
  1595  00C5                     i1u1960:
  1596                           	line	25
  1597                           ;isr.c: 25: uart_interrupt();
  1598  00C5  120A  118A  2184   	fcall	_uart_interrupt
              120A  118A         
  1599                           	line	26
  1600                           ;isr.c: 26: RCIF=0;
  1601  00CA  1283               	bcf	status, 5	;RP0=0, select bank0
  1602  00CB  1303               	bcf	status, 6	;RP2=0, select bank0
  1603  00CC  128C               	bcf	(101/8),(101)&7
  1604                           	line	27
  1605                           	
  1606  00CD                     i1l47:	
  1607                           	line	30
  1608                           ;isr.c: 27: }
  1609                           ;isr.c: 30: if ((INTE)&&(INTF)) {
  1610  00CD  1283               	bcf	status, 5	;RP0=0, select bank0
  1611  00CE  1E0B               	btfss	(92/8),(92)&7
  1612  00CF  28D1               	goto	i1u1971
  1613  00D0  28D2               	goto	i1u1970
  1614  00D1                     i1u1971:
  1615  00D1  28DE               	goto	i1l48
  1616  00D2                     i1u1970:
  1617  00D2  1C8B               	btfss	(89/8),(89)&7
  1618  00D3  28D5               	goto	i1u1981
  1619  00D4  28D6               	goto	i1u1980
  1620  00D5                     i1u1981:
  1621  00D5  28DE               	goto	i1l48
  1622  00D6                     i1u1980:
  1623                           	line	31
  1624                           ;isr.c: 31: rof_interrupt();
  1625  00D6  120A  118A  20E9   	fcall	_rof_interrupt
              120A  118A         
  1626                           	line	32
  1627                           ;isr.c: 32: INTF = 0;
  1628  00DB  1283               	bcf	status, 5	;RP0=0, select bank0
  1629  00DC  1303               	bcf	status, 6	;RP2=0, select bank0
  1630  00DD  108B               	bcf	(89/8),(89)&7
  1631                           	line	33
  1632                           	
  1633  00DE                     i1l48:	
  1634                           	line	34
  1635                           ;isr.c: 33: }
  1636                           ;isr.c: 34: }
  1637  00DE                     i1l44:	
  1638  00DE  085C               	movf	(??_my_isr+3),w
  1639  00DF  00FE               	movwf	btemp+0
  1640  00E0  085B               	movf	(??_my_isr+2),w
  1641  00E1  008A               	movwf	pclath
  1642  00E2  085A               	movf	(??_my_isr+1),w
  1643  00E3  0084               	movwf	fsr
  1644  00E4  0859               	movf	(??_my_isr+0),w
  1645  00E5  0083               	movwf	status
  1646  00E6  0EFF               	swapf	saved_w,f
  1647  00E7  0E7F               	swapf	saved_w,w
  1648  00E8  0009               	retfie
  1649                           ; =============== function _my_isr ends =======
                                 ========
  1650                           
  1651                           GLOBAL __end_of_my_isr
  1652  00E9                     	__end_of_my_isr:
  1653                           	FNSIZE	_my_isr,4,0
  1654                           	signat	_my_isr,88
  1655                           	psect	intrtext
  1656                           	global	intlevel1
  1657                           	FNBREAK _uart_interrupt,intlevel1
  1658                           	global	_uart_interrupt
  1659                           	global	??_uart_interrupt
  1660                           	global	?_uart_interrupt
  1661                           
  1662                           ; *************** function _uart_interrupt ****
                                 ***********
  1663                           ; Defined at:
  1664                           ;		line 22 in file "../uart.c"
  1665                           ; Parameters:
  1666                           ;		None
  1667                           ; Auto variables:
  1668                           ;		data        	       	type: unsigned char 
  1669                           ; Return value:
  1670                           ;		type: void 
  1671                           ;		size: 0
  1672                           ; Registers used:
  1673                           ;		wreg, fsr, status,2, status,0, pclath, cstac
                                 k
  1674                           ; Tracked objects:
  1675                           ;		On entry : 300/0
  1676                           ;		On exit  : 0/0
  1677                           ;		Unchanged: 0/0
  1678                           ; Data sizes:
  1679                           ;		Autos:    1
  1680                           ;		Params:   0
  1681                           ;		Temp:     1
  1682                           ;		Total:    2
  1683                           ; This function calls:
  1684                           ;		_in_push
  1685                           ; This function is called by:
  1686                           ;		_my_isr
  1687                           ; This function uses a non-reentrant model
  1688                           ; 
  1689                           	psect	text170,local,class=CODE,delta=2
  1690                           	file	"../uart.c"
  1691                           	line	22
  1692                           ;uart.c: 22: void uart_interrupt(void) {
  1693                           	
  1694  0184                     _uart_interrupt:	
  1695                           ; Regs used in _uart_interrupt: [wreg+fsr+statu
                                 s,2+status,0+pclath+cstack]
  1696                           	line	23
  1697                           ;uart.c: 23: unsigned char data = RCREG;
  1698                           	
  1699  0184  081A               	movf	(26),w	;volatile
  1700                           	
  1701                           	
  1702  0185  00DD               	movwf	(_uart_interrupt_data)
  1703                           	line	24
  1704                           ;uart.c: 24: if (index == 0) {
  1705                           	
  1706  0186  08FC               	movf	(124),f
  1707  0187  1D03               	skipz	;volatile
  1708  0188  298A               	goto	i1u1871
  1709  0189  298B               	goto	i1u1870
  1710  018A                     i1u1871:
  1711  018A  2991               	goto	i1l11
  1712  018B                     i1u1870:
  1713                           	line	25
  1714                           ;uart.c: 25: packet.src_id = data;
  1715                           	
  1716  018B  085D               	movf	(_uart_interrupt_data),w
  1717  018C  1383               	bcf	status, 7	;select IRP bank0
  1718                           	
  1719  018D  00DE               	movwf	(??_uart_interrupt+1+0)
  1720                           	
  1721  018E  085E               	movf	(??_uart_interrupt+1+0),w
  1722  018F  00BE               	movwf	(62)
  1723                           	line	26
  1724                           ;uart.c: 26: } else if (index == 1) {
  1725  0190  29B3               	goto	i1l12
  1726                           	
  1727  0191                     i1l11:	
  1728                           	
  1729  0191  087C               	movf	(124),w	;volatile
  1730                           	
  1731  0192  3A01               	xorlw	01h
  1732  0193  1D03               	skipz
  1733  0194  2996               	goto	i1u1881
  1734  0195  2997               	goto	i1u1880
  1735  0196                     i1u1881:
  1736  0196  299D               	goto	i1l13
  1737  0197                     i1u1880:
  1738                           	line	27
  1739                           ;uart.c: 27: packet.dst_id = data;
  1740                           	
  1741  0197  085D               	movf	(_uart_interrupt_data),w
  1742  0198  1383               	bcf	status, 7	;select IRP bank0
  1743                           	
  1744  0199  00DE               	movwf	(??_uart_interrupt+1+0)
  1745                           	
  1746  019A  085E               	movf	(??_uart_interrupt+1+0),w
  1747  019B  00BF               	movwf	(0+62+01h)&07fh
  1748                           	line	28
  1749                           ;uart.c: 28: } else if (index == 2) {
  1750  019C  29B3               	goto	i1l12
  1751                           	
  1752  019D                     i1l13:	
  1753                           	
  1754  019D  087C               	movf	(124),w	;volatile
  1755                           	
  1756  019E  3A02               	xorlw	02h
  1757  019F  1D03               	skipz
  1758  01A0  29A2               	goto	i1u1891
  1759  01A1  29A3               	goto	i1u1890
  1760  01A2                     i1u1891:
  1761  01A2  29B3               	goto	i1l12
  1762  01A3                     i1u1890:
  1763                           	line	29
  1764                           ;uart.c: 29: packet.data = data;
  1765                           	
  1766  01A3  085D               	movf	(_uart_interrupt_data),w
  1767  01A4  1383               	bcf	status, 7	;select IRP bank0
  1768                           	
  1769  01A5  00DE               	movwf	(??_uart_interrupt+1+0)
  1770                           	
  1771  01A6  085E               	movf	(??_uart_interrupt+1+0),w
  1772  01A7  00C0               	movwf	(0+62+02h)&07fh
  1773                           	line	30
  1774                           ;uart.c: 30: in_push(packet);
  1775                           	
  1776                           	
  1777  01A8  083E               	movf	(62),w
  1778  01A9  00E5               	movwf	(?_in_push)
  1779  01AA  083F               	movf	(62+1),w
  1780  01AB  00E6               	movwf	(?_in_push+1)
  1781  01AC  0840               	movf	(62+2),w
  1782  01AD  00E7               	movwf	(?_in_push+2)
  1783  01AE  120A  118A  22A7   	fcall	_in_push
              120A  118A         
  1784                           	line	31
  1785                           	
  1786  01B3                     i1l15:	
  1787                           	line	32
  1788                           	
  1789  01B3                     i1l14:	
  1790                           	
  1791  01B3                     i1l12:	
  1792                           ;uart.c: 31: }
  1793                           ;uart.c: 32: index++;
  1794  01B3  3001               	movlw	(01h)
  1795  01B4  1283               	bcf	status, 5	;RP0=0, select bank0
  1796  01B5  1303               	bcf	status, 6	;RP2=0, select bank0
  1797  01B6  00DE               	movwf	(??_uart_interrupt+1+0)
  1798                           	
  1799  01B7  085E               	movf	(??_uart_interrupt+1+0),w
  1800  01B8  07FC               	addwf	(124),f	;volatile
  1801                           	line	33
  1802                           ;uart.c: 33: if (index > 2) {
  1803  01B9  3003               	movlw	(03h)
  1804                           	
  1805  01BA  027C               	subwf	(124),w	;volatile
  1806  01BB  1C03               	skipc
  1807  01BC  29BE               	goto	i1u1901
  1808  01BD  29BF               	goto	i1u1900
  1809  01BE                     i1u1901:
  1810  01BE  29C4               	goto	i1l16
  1811  01BF                     i1u1900:
  1812                           	line	34
  1813                           ;uart.c: 34: index = 0;
  1814  01BF  1003               	clrc
  1815                           	
  1816  01C0  3000               	movlw	0
  1817  01C1  1803               	btfsc	status,0
  1818  01C2  3001               	movlw	1
  1819  01C3  00FC               	movwf	(124)	;volatile
  1820                           	line	35
  1821                           	
  1822  01C4                     i1l16:	
  1823                           	line	36
  1824                           ;uart.c: 35: }
  1825                           ;uart.c: 36: }
  1826  01C4                     i1l10:	
  1827  01C4  0008               	return
  1828                           ; =============== function _uart_interrupt ends
                                  ===============
  1829                           
  1830                           GLOBAL __end_of_uart_interrupt
  1831  01C5                     	__end_of_uart_interrupt:
  1832                           	FNSIZE	_uart_interrupt,2,0
  1833                           	signat	_uart_interrupt,88
  1834                           	psect	text171,local,class=CODE,delta=2
  1835                           	global	intlevel1
  1836                           	FNBREAK _sb_interrupt,intlevel1
  1837                           	global	_sb_interrupt
  1838                           	global	??_sb_interrupt
  1839                           	global	?_sb_interrupt
  1840                           
  1841                           ; *************** function _sb_interrupt ******
                                 *********
  1842                           ; Defined at:
  1843                           ;		line 6 in file "../sb.c"
  1844                           ; Parameters:
  1845                           ;		None
  1846                           ; Auto variables:
  1847                           ;		packet      	       	type: struct packet_t
  1848                           ; Return value:
  1849                           ;		type: void 
  1850                           ;		size: 0
  1851                           ; Registers used:
  1852                           ;		wreg, fsr, status,2, status,0, pclath, cstac
                                 k
  1853                           ; Tracked objects:
  1854                           ;		On entry : 300/0
  1855                           ;		On exit  : 0/0
  1856                           ;		Unchanged: 0/0
  1857                           ; Data sizes:
  1858                           ;		Autos:    3
  1859                           ;		Params:   0
  1860                           ;		Temp:     2
  1861                           ;		Total:    5
  1862                           ; This function calls:
  1863                           ;		i1__delay
  1864                           ;		_in_push
  1865                           ; This function is called by:
  1866                           ;		_my_isr
  1867                           ; This function uses a non-reentrant model
  1868                           ; 
  1869                           	file	"../sb.c"
  1870                           	line	6
  1871                           ;sb.c: 6: void sb_interrupt(void) {
  1872                           	
  1873  027D                     _sb_interrupt:	
  1874                           ; Regs used in _sb_interrupt: [wreg+fsr+status,
                                 2+status,0+pclath+cstack]
  1875                           	line	9
  1876                           ;sb.c: 7: struct packet_t packet;
  1877                           ;sb.c: 9: _delay((unsigned long)((20)*(20000000
                                 /4000UL)));
  1878                           	
  1879  027D  3082               	movlw	130
  1880  027E  00E1               movwf	(??_sb_interrupt+3+0+1),f
  1881  027F  30DD               	movlw	221
  1882  0280  00E0               movwf	(??_sb_interrupt+3+0),f
  1883  0281                     u2257:
  1884  0281  0BE0               	decfsz	(??_sb_interrupt+3+0),f
  1885  0282  2A81               	goto	u2257
  1886  0283  0BE1               	decfsz	(??_sb_interrupt+3+0+1),f
  1887  0284  2A81               	goto	u2257
  1888  0285  2A86               	nop2
  1889                           
  1890                           	line	10
  1891                           ;sb.c: 10: packet.src_id = 9;
  1892  0286  3009               	movlw	(09h)
  1893  0287  1283               	bcf	status, 5	;RP0=0, select bank0
  1894  0288  1303               	bcf	status, 6	;RP2=0, select bank0
  1895                           	
  1896  0289  00DD               	movwf	(_sb_interrupt_packet)
  1897                           	line	11
  1898                           ;sb.c: 11: packet.dst_id = 0;
  1899  028A  1003               	clrc
  1900                           	
  1901  028B  3000               	movlw	0
  1902  028C  1803               	btfsc	status,0
  1903  028D  3001               	movlw	1
  1904  028E  00DE               	movwf	(0+_sb_interrupt_packet+01h)&07fh
  1905                           	line	12
  1906                           ;sb.c: 12: packet.data = PORTB >> 4;
  1907                           	
  1908  028F  0806               	movf	(6),w	;volatile
  1909                           	
  1910  0290  00E0               	movwf	(??_sb_interrupt+3+0)
  1911  0291  3004               	movlw	04h
  1912  0292                     i1u1995:
  1913  0292  1003               	clrc
  1914  0293  0CE0               	rrf	(??_sb_interrupt+3+0),f
  1915  0294  3EFF               	addlw	-1
  1916  0295  1D03               	skipz
  1917  0296  2A92               	goto	i1u1995
  1918  0297  0860               	movf	0+(??_sb_interrupt+3+0),w
  1919                           	
  1920  0298  00E1               	movwf	(??_sb_interrupt+4+0)
  1921                           	
  1922  0299  0861               	movf	(??_sb_interrupt+4+0),w
  1923  029A  00DF               	movwf	(0+_sb_interrupt_packet+02h)&07fh
  1924                           	line	13
  1925                           ;sb.c: 13: in_push(packet);
  1926                           	
  1927                           	
  1928  029B  085D               	movf	(_sb_interrupt_packet),w
  1929  029C  00E5               	movwf	(?_in_push)
  1930  029D  085E               	movf	(_sb_interrupt_packet+1),w
  1931  029E  00E6               	movwf	(?_in_push+1)
  1932  029F  085F               	movf	(_sb_interrupt_packet+2),w
  1933  02A0  00E7               	movwf	(?_in_push+2)
  1934  02A1  120A  118A  22A7   	fcall	_in_push
              120A  118A         
  1935                           	line	14
  1936                           ;sb.c: 14: }
  1937  02A6                     i1l18:	
  1938  02A6  0008               	return
  1939                           ; =============== function _sb_interrupt ends =
                                 ==============
  1940                           
  1941                           GLOBAL __end_of_sb_interrupt
  1942  02A7                     	__end_of_sb_interrupt:
  1943                           	FNSIZE	_sb_interrupt,5,0
  1944                           	signat	_sb_interrupt,88
  1945                           	psect	text172,local,class=CODE,delta=2
  1946                           	global	intlevel1
  1947                           	FNBREAK _rof_interrupt,intlevel1
  1948                           	global	_rof_interrupt
  1949                           	global	??_rof_interrupt
  1950                           	global	?_rof_interrupt
  1951                           
  1952                           ; *************** function _rof_interrupt *****
                                 **********
  1953                           ; Defined at:
  1954                           ;		line 20 in file "../rof.c"
  1955                           ; Parameters:
  1956                           ;		None
  1957                           ; Auto variables:
  1958                           ;		None
  1959                           ; Return value:
  1960                           ;		type: void 
  1961                           ;		size: 0
  1962                           ; Registers used:
  1963                           ;		wreg, fsr, status,2, status,0, pclath, cstac
                                 k
  1964                           ; Tracked objects:
  1965                           ;		On entry : 300/0
  1966                           ;		On exit  : 0/0
  1967                           ;		Unchanged: 0/0
  1968                           ; Data sizes:
  1969                           ;		Autos:    0
  1970                           ;		Params:   0
  1971                           ;		Temp:     1
  1972                           ;		Total:    1
  1973                           ; This function calls:
  1974                           ;		_in_push
  1975                           ; This function is called by:
  1976                           ;		_my_isr
  1977                           ; This function uses a non-reentrant model
  1978                           ; 
  1979                           	file	"../rof.c"
  1980                           	line	20
  1981                           ;rof.c: 20: void rof_interrupt(void) {
  1982                           	
  1983  00E9                     _rof_interrupt:	
  1984                           ; Regs used in _rof_interrupt: [wreg+fsr+status
                                 ,2+status,0+pclath+cstack]
  1985                           	line	21
  1986                           ;rof.c: 21: data = ((data >> 1)|(RB1 << 7));
  1987  00E9  1003               	clrc
  1988  00EA  1886               	btfsc	(49/8),(49)&7
  1989  00EB  1403               	setc
  1990                           	
  1991                           	
  1992  00EC  0CF1               	rrf	(113),f	;volatile
  1993                           	line	22
  1994                           ;rof.c: 22: bitcount++;
  1995  00ED  3001               	movlw	(01h)
  1996  00EE  00DD               	movwf	(??_rof_interrupt+0+0)
  1997                           	
  1998  00EF  085D               	movf	(??_rof_interrupt+0+0),w
  1999  00F0  07F2               	addwf	(114),f	;volatile
  2000                           	line	24
  2001                           ;rof.c: 24: if (bitcount == 8) {
  2002                           	
  2003  00F1  0872               	movf	(114),w	;volatile
  2004                           	
  2005  00F2  3A08               	xorlw	08h
  2006  00F3  1D03               	skipz
  2007  00F4  28F6               	goto	i1u2001
  2008  00F5  28F7               	goto	i1u2000
  2009  00F6                     i1u2001:
  2010  00F6  293C               	goto	i1l22
  2011  00F7                     i1u2000:
  2012                           	line	25
  2013                           ;rof.c: 25: if (index == 0) {
  2014                           	
  2015  00F7  08F7               	movf	(119),f
  2016  00F8  1D03               	skipz	;volatile
  2017  00F9  28FB               	goto	i1u2011
  2018  00FA  28FC               	goto	i1u2010
  2019  00FB                     i1u2011:
  2020  00FB  2901               	goto	i1l23
  2021  00FC                     i1u2010:
  2022                           	line	26
  2023                           ;rof.c: 26: entry.src_id = data;
  2024                           	
  2025  00FC  0871               	movf	(113),w	;volatile
  2026                           	
  2027  00FD  00DD               	movwf	(??_rof_interrupt+0+0)
  2028                           	
  2029  00FE  085D               	movf	(??_rof_interrupt+0+0),w
  2030  00FF  00F3               	movwf	(115)
  2031                           	line	27
  2032                           ;rof.c: 27: } else if (index == 1) {
  2033  0100  2921               	goto	i1l24
  2034                           	
  2035  0101                     i1l23:	
  2036                           	
  2037  0101  0877               	movf	(119),w	;volatile
  2038                           	
  2039  0102  3A01               	xorlw	01h
  2040  0103  1D03               	skipz
  2041  0104  2906               	goto	i1u2021
  2042  0105  2907               	goto	i1u2020
  2043  0106                     i1u2021:
  2044  0106  290C               	goto	i1l25
  2045  0107                     i1u2020:
  2046                           	line	28
  2047                           ;rof.c: 28: entry.dst_id = data;
  2048                           	
  2049  0107  0871               	movf	(113),w	;volatile
  2050                           	
  2051  0108  00DD               	movwf	(??_rof_interrupt+0+0)
  2052                           	
  2053  0109  085D               	movf	(??_rof_interrupt+0+0),w
  2054  010A  00F4               	movwf	0+(115)+01h
  2055                           	line	29
  2056                           ;rof.c: 29: } else if (index == 2) {
  2057  010B  2921               	goto	i1l24
  2058                           	
  2059  010C                     i1l25:	
  2060                           	
  2061  010C  0877               	movf	(119),w	;volatile
  2062                           	
  2063  010D  3A02               	xorlw	02h
  2064  010E  1D03               	skipz
  2065  010F  2911               	goto	i1u2031
  2066  0110  2912               	goto	i1u2030
  2067  0111                     i1u2031:
  2068  0111  2921               	goto	i1l24
  2069  0112                     i1u2030:
  2070                           	line	30
  2071                           ;rof.c: 30: entry.data = data;
  2072                           	
  2073  0112  0871               	movf	(113),w	;volatile
  2074                           	
  2075  0113  00DD               	movwf	(??_rof_interrupt+0+0)
  2076                           	
  2077  0114  085D               	movf	(??_rof_interrupt+0+0),w
  2078  0115  00F5               	movwf	0+(115)+02h
  2079                           	line	31
  2080                           ;rof.c: 31: in_push(entry);
  2081                           	
  2082                           	
  2083  0116  0873               	movf	(115),w
  2084  0117  00E5               	movwf	(?_in_push)
  2085  0118  0874               	movf	(115+1),w
  2086  0119  00E6               	movwf	(?_in_push+1)
  2087  011A  0875               	movf	(115+2),w
  2088  011B  00E7               	movwf	(?_in_push+2)
  2089  011C  120A  118A  22A7   	fcall	_in_push
              120A  118A         
  2090                           	line	32
  2091                           	
  2092  0121                     i1l27:	
  2093                           	line	33
  2094                           	
  2095  0121                     i1l26:	
  2096                           	
  2097  0121                     i1l24:	
  2098                           ;rof.c: 32: }
  2099                           ;rof.c: 33: bitcount = 0;
  2100  0121  1003               	clrc
  2101  0122  1283               	bcf	status, 5	;RP0=0, select bank0
  2102  0123  1303               	bcf	status, 6	;RP2=0, select bank0
  2103                           	
  2104  0124  3000               	movlw	0
  2105  0125  1803               	btfsc	status,0
  2106  0126  3001               	movlw	1
  2107  0127  00F2               	movwf	(114)	;volatile
  2108                           	line	34
  2109                           ;rof.c: 34: data = 0;
  2110  0128  1003               	clrc
  2111                           	
  2112  0129  3000               	movlw	0
  2113  012A  1803               	btfsc	status,0
  2114  012B  3001               	movlw	1
  2115  012C  00F1               	movwf	(113)	;volatile
  2116                           	line	35
  2117                           ;rof.c: 35: index++;
  2118  012D  3001               	movlw	(01h)
  2119  012E  00DD               	movwf	(??_rof_interrupt+0+0)
  2120                           	
  2121  012F  085D               	movf	(??_rof_interrupt+0+0),w
  2122  0130  07F7               	addwf	(119),f	;volatile
  2123                           	line	36
  2124                           ;rof.c: 36: if (index > 2) {
  2125  0131  3003               	movlw	(03h)
  2126                           	
  2127  0132  0277               	subwf	(119),w	;volatile
  2128  0133  1C03               	skipc
  2129  0134  2936               	goto	i1u2041
  2130  0135  2937               	goto	i1u2040
  2131  0136                     i1u2041:
  2132  0136  293C               	goto	i1l22
  2133  0137                     i1u2040:
  2134                           	line	37
  2135                           ;rof.c: 37: index = 0;
  2136  0137  1003               	clrc
  2137                           	
  2138  0138  3000               	movlw	0
  2139  0139  1803               	btfsc	status,0
  2140  013A  3001               	movlw	1
  2141  013B  00F7               	movwf	(119)	;volatile
  2142                           	line	38
  2143                           	
  2144  013C                     i1l28:	
  2145                           	line	39
  2146                           	
  2147  013C                     i1l22:	
  2148                           	line	40
  2149                           ;rof.c: 38: }
  2150                           ;rof.c: 39: }
  2151                           ;rof.c: 40: }
  2152  013C                     i1l21:	
  2153  013C  0008               	return
  2154                           ; =============== function _rof_interrupt ends 
                                 ===============
  2155                           
  2156                           GLOBAL __end_of_rof_interrupt
  2157  013D                     	__end_of_rof_interrupt:
  2158                           	FNSIZE	_rof_interrupt,1,0
  2159                           	signat	_rof_interrupt,88
  2160                           	psect	text173,local,class=CODE,delta=2
  2161                           	global	intlevel1
  2162                           	FNBREAK _adc_interrupt,intlevel1
  2163                           	global	_adc_interrupt
  2164                           	global	??_adc_interrupt
  2165                           	global	?_adc_interrupt
  2166                           
  2167                           ; *************** function _adc_interrupt *****
                                 **********
  2168                           ; Defined at:
  2169                           ;		line 33 in file "../adc.c"
  2170                           ; Parameters:
  2171                           ;		None
  2172                           ; Auto variables:
  2173                           ;		old_value   	       	type: unsigned char 
  2174                           ;		hi_bound    	       	type: unsigned char 
  2175                           ;		lo_bound    	       	type: unsigned char 
  2176                           ;		new_value   	       	type: unsigned char 
  2177                           ;		entry       	       	type: struct packet_t
  2178                           ; Return value:
  2179                           ;		type: void 
  2180                           ;		size: 0
  2181                           ; Registers used:
  2182                           ;		wreg, fsr, status,2, status,0, pclath, cstac
                                 k
  2183                           ; Tracked objects:
  2184                           ;		On entry : 300/0
  2185                           ;		On exit  : 0/0
  2186                           ;		Unchanged: 0/0
  2187                           ; Data sizes:
  2188                           ;		Autos:    7
  2189                           ;		Params:   0
  2190                           ;		Temp:     1
  2191                           ;		Total:    8
  2192                           ; This function calls:
  2193                           ;		_in_push
  2194                           ; This function is called by:
  2195                           ;		_my_isr
  2196                           ; This function uses a non-reentrant model
  2197                           ; 
  2198                           	file	"../adc.c"
  2199                           	line	33
  2200                           ;adc.c: 33: void adc_interrupt(void) {
  2201                           	
  2202  013D                     _adc_interrupt:	
  2203                           ; Regs used in _adc_interrupt: [wreg+fsr+status
                                 ,2+status,0+pclath+cstack]
  2204                           	line	35
  2205                           ;adc.c: 34: struct packet_t entry;
  2206                           ;adc.c: 35: unsigned char new_value = ADRESH;
  2207                           	
  2208  013D  081E               	movf	(30),w	;volatile
  2209                           	
  2210                           	
  2211  013E  00DE               	movwf	(_adc_interrupt_new_value)
  2212                           	line	36
  2213                           ;adc.c: 36: unsigned char old_value = values[ad
                                 c_channel];
  2214                           	
  2215  013F  0870               	movf	(112),w
  2216                           	
  2217  0140  3E41               	addlw	65&0ffh
  2218  0141  0084               	movwf	fsr
  2219  0142  1383               	bcf	status, 7	;select IRP bank0
  2220                           	
  2221  0143  0800               	movf	indf,w
  2222                           	
  2223                           	
  2224  0144  00DD               	movwf	(_adc_interrupt_old_value)
  2225                           	line	37
  2226                           ;adc.c: 37: unsigned char lo_bound = new_value;
  2227                           	
  2228  0145  085E               	movf	(_adc_interrupt_new_value),w
  2229                           	
  2230                           	
  2231  0146  00DF               	movwf	(_adc_interrupt_lo_bound)
  2232                           	line	38
  2233                           ;adc.c: 38: unsigned char hi_bound = new_value;
  2234                           	
  2235  0147  085E               	movf	(_adc_interrupt_new_value),w
  2236                           	
  2237                           	
  2238  0148  00E0               	movwf	(_adc_interrupt_hi_bound)
  2239                           	line	44
  2240                           ;adc.c: 44: if (lo_bound > 0) {
  2241                           	
  2242  0149  08DF               	movf	(_adc_interrupt_lo_bound),f
  2243  014A  1D03               	skipz
  2244  014B  294D               	goto	i1u2050
  2245  014C  294F               	goto	i1l67
  2246  014D                     i1u2050:
  2247                           	line	45
  2248                           ;adc.c: 45: lo_bound--;
  2249                           	
  2250                           	
  2251  014D  3001               	movlw	low(01h)
  2252  014E  02DF               	subwf	(_adc_interrupt_lo_bound),f
  2253                           	line	46
  2254                           	
  2255  014F                     i1l67:	
  2256                           	line	47
  2257                           ;adc.c: 46: }
  2258                           ;adc.c: 47: if (hi_bound < 255) {
  2259                           	
  2260  014F  0860               	movf	(_adc_interrupt_hi_bound),w
  2261                           	
  2262  0150  3AFF               	xorlw	0FFh
  2263  0151  1903               	skipnz
  2264  0152  2954               	goto	i1u2061
  2265  0153  2955               	goto	i1u2060
  2266  0154                     i1u2061:
  2267  0154  2959               	goto	i1l68
  2268  0155                     i1u2060:
  2269                           	line	48
  2270                           ;adc.c: 48: hi_bound++;
  2271  0155  3001               	movlw	(01h)
  2272  0156  00E4               	movwf	(??_adc_interrupt+7+0)
  2273                           	
  2274  0157  0864               	movf	(??_adc_interrupt+7+0),w
  2275  0158  07E0               	addwf	(_adc_interrupt_hi_bound),f
  2276                           	line	49
  2277                           	
  2278  0159                     i1l68:	
  2279                           	line	58
  2280                           ;adc.c: 49: }
  2281                           ;adc.c: 58: if (old_value < lo_bound || old_val
                                 ue > hi_bound) {
  2282                           	
  2283  0159  085F               	movf	(_adc_interrupt_lo_bound),w
  2284                           	
  2285                           	
  2286  015A  025D               	subwf	(_adc_interrupt_old_value),w
  2287  015B  1C03               	skipc
  2288  015C  295E               	goto	i1u2071
  2289  015D  295F               	goto	i1u2070
  2290  015E                     i1u2071:
  2291  015E  2965               	goto	i1l600002149
  2292  015F                     i1u2070:
  2293                           	
  2294  015F  085D               	movf	(_adc_interrupt_old_value),w
  2295                           	
  2296                           	
  2297  0160  0260               	subwf	(_adc_interrupt_hi_bound),w
  2298  0161  1803               	skipnc
  2299  0162  2964               	goto	i1u2081
  2300  0163  2965               	goto	i1u2080
  2301  0164                     i1u2081:
  2302  0164  2983               	goto	i1l69
  2303  0165                     i1u2080:
  2304                           	
  2305  0165                     i1l600002149:	
  2306                           	line	59
  2307                           ;adc.c: 59: values[adc_channel] = new_value;
  2308                           	
  2309  0165  085E               	movf	(_adc_interrupt_new_value),w
  2310                           	
  2311  0166  00E4               	movwf	(??_adc_interrupt+7+0)
  2312                           	
  2313  0167  0870               	movf	(112),w
  2314                           	
  2315  0168  3E41               	addlw	65&0ffh
  2316  0169  0084               	movwf	fsr
  2317                           	
  2318  016A  0864               	movf	(??_adc_interrupt+7+0),w
  2319  016B  0080               	movwf	indf
  2320                           	line	60
  2321                           ;adc.c: 60: entry.src_id = adc_channel + 1;
  2322                           	
  2323  016C  0870               	movf	(112),w
  2324                           	
  2325  016D  3E01               	addlw	01h
  2326                           	
  2327  016E  00E1               	movwf	(_adc_interrupt_entry)
  2328                           	line	61
  2329                           ;adc.c: 61: entry.dst_id = 0;
  2330  016F  1003               	clrc
  2331                           	
  2332  0170  3000               	movlw	0
  2333  0171  1803               	btfsc	status,0
  2334  0172  3001               	movlw	1
  2335  0173  00E2               	movwf	(0+_adc_interrupt_entry+01h)&07fh
  2336                           	line	62
  2337                           ;adc.c: 62: entry.data = new_value;
  2338                           	
  2339  0174  085E               	movf	(_adc_interrupt_new_value),w
  2340                           	
  2341  0175  00E4               	movwf	(??_adc_interrupt+7+0)
  2342                           	
  2343  0176  0864               	movf	(??_adc_interrupt+7+0),w
  2344  0177  00E3               	movwf	(0+_adc_interrupt_entry+02h)&07fh
  2345                           	line	63
  2346                           ;adc.c: 63: in_push(entry);
  2347                           	
  2348                           	
  2349  0178  0861               	movf	(_adc_interrupt_entry),w
  2350  0179  00E5               	movwf	(?_in_push)
  2351  017A  0862               	movf	(_adc_interrupt_entry+1),w
  2352  017B  00E6               	movwf	(?_in_push+1)
  2353  017C  0863               	movf	(_adc_interrupt_entry+2),w
  2354  017D  00E7               	movwf	(?_in_push+2)
  2355  017E  120A  118A  22A7   	fcall	_in_push
              120A  118A         
  2356                           	line	64
  2357                           	
  2358  0183                     i1l69:	
  2359                           	line	65
  2360                           ;adc.c: 64: }
  2361                           ;adc.c: 65: }
  2362  0183                     i1l66:	
  2363  0183  0008               	return
  2364                           ; =============== function _adc_interrupt ends 
                                 ===============
  2365                           
  2366                           GLOBAL __end_of_adc_interrupt
  2367  0184                     	__end_of_adc_interrupt:
  2368                           	FNSIZE	_adc_interrupt,8,0
  2369                           	signat	_adc_interrupt,88
  2370                           	psect	text174,local,class=CODE,delta=2
  2371                           	global	intlevel1
  2372                           	FNBREAK _in_push,intlevel1
  2373                           	global	_in_push
  2374                           	global	??_in_push
  2375                           	global	?_in_push
  2376                           
  2377                           ; *************** function _in_push ***********
                                 ****
  2378                           ; Defined at:
  2379                           ;		line 16 in file "../fifo.c"
  2380                           ; Parameters:
  2381                           ;		entry       	offs:   0	type: struct packet_t
  2382                           ; Auto variables:
  2383                           ;		None
  2384                           ; Return value:
  2385                           ;		type: void 
  2386                           ;		size: 0
  2387                           ; Registers used:
  2388                           ;		wreg, fsr, status,2, status,0, pclath, cstac
                                 k
  2389                           ; Tracked objects:
  2390                           ;		On entry : 300/0
  2391                           ;		On exit  : 0/0
  2392                           ;		Unchanged: 0/0
  2393                           ; Data sizes:
  2394                           ;		Autos:    0
  2395                           ;		Params:   3
  2396                           ;		Temp:     1
  2397                           ;		Total:    4
  2398                           ; This function calls:
  2399                           ;		i1___wmul
  2400                           ;		i1___bmul
  2401                           ; This function is called by:
  2402                           ;		_uart_interrupt
  2403                           ;		_sb_interrupt
  2404                           ;		_rof_interrupt
  2405                           ;		_adc_interrupt
  2406                           ; This function uses a non-reentrant model
  2407                           ; 
  2408                           	file	"../fifo.c"
  2409                           	line	16
  2410                           ;fifo.h: 10: struct packet_t {
  2411                           ;fifo.h: 11: unsigned char src_id;
  2412                           ;fifo.h: 12: unsigned char dst_id;
  2413                           ;fifo.h: 13: unsigned char data;
  2414                           ;fifo.h: 14: };
  2415                           ;fifo.h: 16: void in_push(struct packet_t entry
                                 );
  2416                           ;fifo.h: 17: struct packet_t in_pop(void);
  2417                           ;fifo.h: 18: unsigned char in_pending(void);
  2418                           ;fifo.h: 20: void out_push(struct packet_t pack
                                 et);
  2419                           ;fifo.h: 21: struct packet_t out_pop(void);
  2420                           ;fifo.h: 22: unsigned char out_pending(void);
  2421                           ;fifo.c: 6: struct packet_t in_fifo[16];
  2422                           ;fifo.c: 7: unsigned char in_iidx = 0;
  2423                           ;fifo.c: 8: unsigned char in_oidx = 0;
  2424                           	
  2425  02A7                     _in_push:	
  2426                           ; Regs used in _in_push: [wreg+fsr+status,2+sta
                                 tus,0+pclath+cstack]
  2427                           	line	17
  2428                           ;fifo.c: 17: in_fifo[in_iidx] = entry;
  2429                           	
  2430  02A7  3003               	movlw	(03h)
  2431                           	
  2432  02A8  00E9               	movwf	(?i1___bmul)
  2433                           	
  2434  02A9  087B               	movf	(123),w
  2435                           	
  2436  02AA  120A  118A  2360   	fcall	i1___bmul
              120A  118A         
  2437  02AF  3EC0               	addlw	192&0ffh
  2438  02B0  0084               	movwf	fsr
  2439  02B1  1283               	bcf	status, 5	;RP0=0, select bank0
  2440  02B2  1303               	bcf	status, 6	;RP2=0, select bank0
  2441  02B3  0865               	movf	(_in_push_entry),w
  2442  02B4  1383               	bcf	status, 7	;select IRP bank0
  2443  02B5  0080               	movwf	indf
  2444  02B6  0A84               	incf	fsr,f
  2445  02B7  0866               	movf	(_in_push_entry+1),w
  2446  02B8  0080               	movwf	indf
  2447  02B9  0A84               	incf	fsr,f
  2448  02BA  0867               	movf	(_in_push_entry+2),w
  2449  02BB  0080               	movwf	indf
  2450                           	line	18
  2451                           ;fifo.c: 18: in_tidx = (in_iidx + 1) & (16-1);;
  2452                           	
  2453  02BC  087B               	movf	(123),w
  2454                           	
  2455  02BD  3E01               	addlw	01h
  2456  02BE  00E8               	movwf	(??_in_push+0+0)
  2457                           	
  2458  02BF  0868               	movf	(??_in_push+0+0),w
  2459  02C0  00FD               	movwf	(125)
  2460  02C1  300F               	movlw	(0Fh)
  2461  02C2  00E8               	movwf	(??_in_push+0+0)
  2462                           	
  2463  02C3  0868               	movf	(??_in_push+0+0),w
  2464  02C4  05FD               	andwf	(125),f
  2465                           	line	19
  2466                           ;fifo.c: 19: if (in_tidx != in_oidx) {
  2467                           	
  2468                           	
  2469  02C5  087D               	movf	(125),w
  2470                           	
  2471  02C6  067A               	xorwf	(122),w
  2472  02C7  1903               	skipnz
  2473  02C8  2ACA               	goto	i1u1861
  2474  02C9  2ACB               	goto	i1u1860
  2475  02CA                     i1u1861:
  2476  02CA  2ACF               	goto	i1l52
  2477  02CB                     i1u1860:
  2478                           	line	20
  2479                           ;fifo.c: 20: in_iidx = in_tidx;
  2480                           	
  2481  02CB  087D               	movf	(125),w
  2482                           	
  2483  02CC  00E8               	movwf	(??_in_push+0+0)
  2484                           	
  2485  02CD  0868               	movf	(??_in_push+0+0),w
  2486  02CE  00FB               	movwf	(123)
  2487                           	line	21
  2488                           	
  2489  02CF                     i1l52:	
  2490                           	line	22
  2491                           ;fifo.c: 21: }
  2492                           ;fifo.c: 22: }
  2493  02CF                     i1l51:	
  2494  02CF  0008               	return
  2495                           ; =============== function _in_push ends ======
                                 =========
  2496                           
  2497                           GLOBAL __end_of_in_push
  2498  02D0                     	__end_of_in_push:
  2499                           	FNSIZE	_in_push,1,3
  2500                           	signat	_in_push,4216
  2501                           	psect	text175,local,class=CODE,delta=2
  2502                           	global	intlevel1
  2503                           	FNBREAK i1___wmul,intlevel1
  2504                           	global	i1___wmul
  2505                           	global	??i1___wmul
  2506                           	global	?i1___wmul
  2507                           
  2508                           ; *************** function i1___wmul **********
                                 *****
  2509                           ; Defined at:
  2510                           ;		line 3 in file "/usr/hitech/picc/pro/9.60PL5
                                 /sources/wmul.c"
  2511                           ; Parameters:
  2512                           ;		multiplier  	offs:   0	type: unsigned int 
  2513                           ;		multiplicand	offs:   2	type: unsigned int 
  2514                           ; Auto variables:
  2515                           ;		product     	       	type: unsigned int 
  2516                           ; Return value:
  2517                           ;		type: unsigned int 
  2518                           ;		size: 2
  2519                           ; Registers used:
  2520                           ;		wreg, status,2, status,0
  2521                           ; Tracked objects:
  2522                           ;		On entry : 0/0
  2523                           ;		On exit  : 0/0
  2524                           ;		Unchanged: 0/0
  2525                           ; Data sizes:
  2526                           ;		Autos:    2
  2527                           ;		Params:   4
  2528                           ;		Temp:     0
  2529                           ;		Total:    6
  2530                           ; This function calls:
  2531                           ;		Nothing
  2532                           ; This function is called by:
  2533                           ;		_in_push
  2534                           ;		i1_in_pop
  2535                           ; This function uses a non-reentrant model
  2536                           ; 
  2537                           	file	"/usr/hitech/picc/pro/9.60PL5/sources/wmu
                                 l.c"
  2538                           	line	3
  2539                           	
  2540  0251                     i1___wmul:	
  2541                           ; Regs used in i1___wmul: [wreg+status,2+status
                                 ,0]
  2542                           	line	4
  2543  0251  3000               	movlw	low(0)
  2544  0252  1283               	bcf	status, 5	;RP0=0, select bank0
  2545  0253  1303               	bcf	status, 6	;RP2=0, select bank0
  2546                           	
  2547  0254  00ED               	movwf	(i1___wmul_product)
  2548  0255  3000               	movlw	high(0)
  2549  0256  00EE               	movwf	((i1___wmul_product))+1
  2550                           	line	6
  2551                           	
  2552  0257                     i1l78:	
  2553                           	line	7
  2554                           	
  2555  0257  1C69               	btfss	(i1___wmul_multiplier),(0)&7
  2556  0258  2A5A               	goto	i1u2091
  2557  0259  2A5B               	goto	i1u2090
  2558  025A                     i1u2091:
  2559  025A  2A61               	goto	i1l79
  2560  025B                     i1u2090:
  2561                           	line	8
  2562                           	
  2563                           	
  2564  025B  086B               	movf	(i1___wmul_multiplicand),w
  2565  025C  07ED               	addwf	(i1___wmul_product),f
  2566  025D  1803               	skipnc
  2567  025E  0AEE               	incf	(i1___wmul_product+1),f
  2568  025F  086C               	movf	(i1___wmul_multiplicand+1),w
  2569  0260  07EE               	addwf	(i1___wmul_product+1),f
  2570                           	
  2571  0261                     i1l79:	
  2572                           	line	9
  2573                           	
  2574  0261  3001               	movlw	01h
  2575  0262                     i1u2105:
  2576  0262  1003               	clrc
  2577  0263  0DEB               	rlf	(i1___wmul_multiplicand),f
  2578  0264  0DEC               	rlf	(i1___wmul_multiplicand+1),f
  2579  0265  3EFF               	addlw	-1
  2580  0266  1D03               	skipz
  2581  0267  2A62               	goto	i1u2105
  2582                           	line	10
  2583                           	
  2584  0268  3001               	movlw	01h
  2585  0269                     i1u2115:
  2586  0269  1003               	clrc
  2587  026A  0CEA               	rrf	(i1___wmul_multiplier+1),f
  2588  026B  0CE9               	rrf	(i1___wmul_multiplier),f
  2589  026C  3EFF               	addlw	-1
  2590  026D  1D03               	skipz
  2591  026E  2A69               	goto	i1u2115
  2592                           	line	11
  2593                           	
  2594  026F  086A               	movf	((i1___wmul_multiplier+1))&07fh,w
  2595  0270  0469               	iorwf	((i1___wmul_multiplier))&07fh,w
  2596  0271  1D03               	skipz
  2597  0272  2A74               	goto	i1u2121
  2598  0273  2A75               	goto	i1u2120
  2599  0274                     i1u2121:
  2600  0274  2A57               	goto	i1l78
  2601  0275                     i1u2120:
  2602                           	
  2603  0275                     i1l77:	
  2604                           	line	12
  2605                           	
  2606                           	
  2607  0275  086D               	movf	(i1___wmul_product),w
  2608  0276  01E9               	clrf	(?i1___wmul)
  2609  0277  07E9               	addwf	(?i1___wmul)
  2610  0278  086E               	movf	(i1___wmul_product+1),w
  2611  0279  01EA               	clrf	(?i1___wmul+1)
  2612  027A  07EA               	addwf	(?i1___wmul+1)
  2613  027B  2A7C               	goto	i1l75
  2614                           	line	13
  2615  027C                     i1l75:	
  2616  027C  0008               	return
  2617                           ; =============== function i1___wmul ends =====
                                 ==========
  2618                           
  2619                           GLOBAL __end_ofi1___wmul
  2620  027D                     	__end_ofi1___wmul:
  2621                           	FNSIZE	i1___wmul,2,4
  2622                           	signat	i1___wmul,8314
  2623                           	psect	text176,local,class=CODE,delta=2
  2624                           	global	intlevel1
  2625                           	FNBREAK i1___bmul,intlevel1
  2626                           	global	i1___bmul
  2627                           	global	??i1___bmul
  2628                           	global	?i1___bmul
  2629                           
  2630                           ; *************** function i1___bmul **********
                                 *****
  2631                           ; Defined at:
  2632                           ;		line 3 in file "bmul.c"
  2633                           ; Parameters:
  2634                           ;		multiplier  	reg:   wr	type: unsigned char 
  2635                           ;		multiplicand	offs:   0	type: unsigned char 
  2636                           ; Auto variables:
  2637                           ;		product     	       	type: unsigned char 
  2638                           ;		multiplier  	       	type: unsigned char 
  2639                           ; Return value:
  2640                           ;		type: unsigned char 
  2641                           ;		size: 1
  2642                           ; Registers used:
  2643                           ;		wreg, status,2, status,0
  2644                           ; Tracked objects:
  2645                           ;		On entry : 300/0
  2646                           ;		On exit  : 0/0
  2647                           ;		Unchanged: 0/0
  2648                           ; Data sizes:
  2649                           ;		Autos:    2
  2650                           ;		Params:   1
  2651                           ;		Temp:     1
  2652                           ;		Total:    4
  2653                           ; This function calls:
  2654                           ;		Nothing
  2655                           ; This function is called by:
  2656                           ;		_in_push
  2657                           ;		i1_in_pop
  2658                           ; This function uses a non-reentrant model
  2659                           ; 
  2660                           	file	"/usr/hitech/picc/pro/9.60PL5/sources/bmu
                                 l.c"
  2661                           	line	3
  2662                           	
  2663  0360                     i1___bmul:	
  2664                           ; Regs used in i1___bmul: [wreg+status,2+status
                                 ,0]
  2665                           ;i1___bmul_multiplier stored from wreg
  2666                           	
  2667  0360  00EB               	movwf	(i1___bmul_multiplier)
  2668                           	line	4
  2669  0361  1003               	clrc
  2670                           	
  2671  0362  3000               	movlw	0
  2672  0363  1803               	btfsc	status,0
  2673  0364  3001               	movlw	1
  2674  0365  00EA               	movwf	(i1___bmul_product)
  2675                           	line	6
  2676                           	
  2677  0366                     i1l73:	
  2678                           	line	7
  2679                           	
  2680  0366  1C6B               	btfss	(i1___bmul_multiplier),(0)&7
  2681  0367  2B69               	goto	i1u751
  2682  0368  2B6A               	goto	i1u750
  2683  0369                     i1u751:
  2684  0369  2B6F               	goto	i1l74
  2685  036A                     i1u750:
  2686                           	line	8
  2687                           	
  2688  036A  0869               	movf	(i1___bmul_multiplicand),w
  2689  036B  1383               	bcf	status, 7	;select IRP bank0
  2690                           	
  2691  036C  00D6               	movwf	(??___bmul+2+0)
  2692                           	
  2693  036D  0856               	movf	(??___bmul+2+0),w
  2694  036E  07EA               	addwf	(i1___bmul_product),f
  2695                           	
  2696  036F                     i1l74:	
  2697                           	line	9
  2698                           	
  2699  036F  1003               	clrc
  2700  0370  0DE9               	rlf	(i1___bmul_multiplicand),f
  2701                           
  2702                           	line	10
  2703                           	
  2704  0371  1003               	clrc
  2705  0372  0CEB               	rrf	(i1___bmul_multiplier),f
  2706                           
  2707                           	line	11
  2708                           	
  2709  0373  08EB               	movf	(i1___bmul_multiplier),f
  2710  0374  1D03               	skipz
  2711  0375  2B77               	goto	i1u761
  2712  0376  2B78               	goto	i1u760
  2713  0377                     i1u761:
  2714  0377  2B66               	goto	i1l73
  2715  0378                     i1u760:
  2716                           	
  2717  0378                     i1l72:	
  2718                           	line	12
  2719                           	
  2720  0378  086A               	movf	(i1___bmul_product),w
  2721  0379  1383               	bcf	status, 7	;select IRP bank0
  2722                           	
  2723  037A  2B7B               	goto	i1l70
  2724                           	line	13
  2725  037B                     i1l70:	
  2726  037B  0008               	return
  2727                           ; =============== function i1___bmul ends =====
                                 ==========
  2728                           
  2729                           GLOBAL __end_ofi1___bmul
  2730  037C                     	__end_ofi1___bmul:
  2731                           	FNSIZE	i1___bmul,3,1
  2732                           	signat	i1___bmul,8313
  2733                           	FNCALL	_main,_init
  2734                           	FNCALL	_main,_rof_init
  2735                           	FNCALL	_main,_adc_advance
  2736                           	FNCALL	_main,_adc_read
  2737                           	FNCALL	_main,_in_pending
  2738                           	FNCALL	_main,_in_pop
  2739                           	FNCALL	_main,_uart_send_packet
  2740                           	FNCALL	_main,_rof_send_packet
  2741                           	FNCALL	_in_pop,___wmul
  2742                           	FNCALL	_in_pop,___bmul
  2743                           	FNCALL	_rof_send_packet,_rof_write_byte
  2744                           	FNCALL	_uart_send_packet,_uart_putc
  2745                           	FNROOT	_main
  2746                           	FNCALL	_my_isr,_adc_interrupt
  2747                           	FNCALL	_my_isr,_sb_interrupt
  2748                           	FNCALL	_my_isr,_uart_interrupt
  2749                           	FNCALL	_my_isr,_rof_interrupt
  2750                           	FNCALL	_uart_interrupt,_in_push
  2751                           	FNCALL	_sb_interrupt,_in_push
  2752                           	FNCALL	_rof_interrupt,_in_push
  2753                           	FNCALL	_adc_interrupt,_in_push
  2754                           	FNCALL	_in_push,i1___wmul
  2755                           	FNCALL	_in_push,i1___bmul
  2756                           	FNCALL	intlevel1,_my_isr
  2757                           	global	intlevel1
  2758                           	FNROOT	intlevel1
  2759                           	psect	strings,class=CODE,delta=2,reloc=256
  2760                           	global	_in_fifo
  2761                           	psect	rbss_1,class=BANK1,space=1
  2762                           
  2763                           	DABS	1,192,48	;_in_fifo
  2764  0000                     	_in_fifo	set	0xC0
  2765                           
  2766                           	global	_out_fifo
  2767                           	psect	rbss_2,class=BANK2,space=1
  2768                           
  2769                           	DABS	1,320,48	;_out_fifo
  2770  0000                     	_out_fifo	set	0x140
  2771                           
  2772                           	global	_values
  2773                           	psect	rbss_0,class=BANK0,space=1
  2774                           
  2775                           	DABS	1,65,8	;_values
  2776  0000                     	_values	set	0x41
  2777                           
  2778                           	global	_entry
  2779                           	psect	common,class=COMMON,space=1
  2780                           
  2781                           	DABS	1,115,3	;_entry
  2782  0000                     	_entry	set	0x73
  2783                           
  2784                           	global	_packet
  2785                           	psect	rbss_0
  2786                           
  2787                           	DABS	1,62,3	;_packet
  2788  0000                     	_packet	set	0x3E
  2789                           
  2790                           	global	_adc_channel
  2791                           	psect	common
  2792                           
  2793                           	DABS	1,112,1	;_adc_channel
  2794  0000                     	_adc_channel	set	0x70
  2795                           
  2796                           	global	_bitcount
  2797                           
  2798                           	DABS	1,114,1	;_bitcount
  2799  0000                     	_bitcount	set	0x72
  2800                           
  2801                           	global	_data
  2802                           
  2803                           	DABS	1,113,1	;_data
  2804  0000                     	_data	set	0x71
  2805                           
  2806                           	global	_in_iidx
  2807                           
  2808                           	DABS	1,123,1	;_in_iidx
  2809  0000                     	_in_iidx	set	0x7B
  2810                           
  2811                           	global	_in_oidx
  2812                           
  2813                           	DABS	1,122,1	;_in_oidx
  2814  0000                     	_in_oidx	set	0x7A
  2815                           
  2816                           	global	_in_tidx
  2817                           
  2818                           	DABS	1,125,1	;_in_tidx
  2819  0000                     	_in_tidx	set	0x7D
  2820                           
  2821                           	global	_index
  2822                           
  2823                           	DABS	1,124,1	;_index
  2824  0000                     	_index	set	0x7C
  2825                           
  2826                           	global	_index_F877
  2827                           
  2828                           	DABS	1,119,1	;_index_F877
  2829  0000                     	_index_F877	set	0x77
  2830                           
  2831                           	global	_out_iidx
  2832                           
  2833                           	DABS	1,118,1	;_out_iidx
  2834  0000                     	_out_iidx	set	0x76
  2835                           
  2836                           	global	_out_oidx
  2837                           
  2838                           	DABS	1,121,1	;_out_oidx
  2839  0000                     	_out_oidx	set	0x79
  2840                           
  2841                           	global	_out_tidx
  2842                           
  2843                           	DABS	1,120,1	;_out_tidx
  2844  0000                     	_out_tidx	set	0x78
  2845                           
  2846                           	global	_ADCON0
  2847  0000                     	_ADCON0	set	0x1F
  2848                           
  2849                           	global	_ADCON1
  2850  0000                     	_ADCON1	set	0x9F
  2851                           
  2852                           	global	_ADRESH
  2853  0000                     	_ADRESH	set	0x1E
  2854                           
  2855                           	global	_ADRESL
  2856                           	global	_ADRESL
  2857  0000                     	_ADRESL	set	0x9E
  2858                           
  2859                           	global	_CCP1CON
  2860                           	global	_CCP1CON
  2861  0000                     	_CCP1CON	set	0x17
  2862                           
  2863                           	global	_CCP2CON
  2864                           	global	_CCP2CON
  2865  0000                     	_CCP2CON	set	0x1D
  2866                           
  2867                           	global	_CCPR1H
  2868                           	global	_CCPR1H
  2869  0000                     	_CCPR1H	set	0x16
  2870                           
  2871                           	global	_CCPR1L
  2872                           	global	_CCPR1L
  2873  0000                     	_CCPR1L	set	0x15
  2874                           
  2875                           	global	_CCPR2H
  2876                           	global	_CCPR2H
  2877  0000                     	_CCPR2H	set	0x1C
  2878                           
  2879                           	global	_CCPR2L
  2880                           	global	_CCPR2L
  2881  0000                     	_CCPR2L	set	0x1B
  2882                           
  2883                           	global	_CMCON
  2884                           	global	_CMCON
  2885  0000                     	_CMCON	set	0x9C
  2886                           
  2887                           	global	_CVRCON
  2888                           	global	_CVRCON
  2889  0000                     	_CVRCON	set	0x9D
  2890                           
  2891                           	global	_EEADR
  2892                           	global	_EEADR
  2893  0000                     	_EEADR	set	0x10D
  2894                           
  2895                           	global	_EEADRH
  2896                           	global	_EEADRH
  2897  0000                     	_EEADRH	set	0x10F
  2898                           
  2899                           	global	_EEADRL
  2900                           	global	_EEADRL
  2901  0000                     	_EEADRL	set	0x10D
  2902                           
  2903                           	global	_EECON1
  2904                           	global	_EECON1
  2905  0000                     	_EECON1	set	0x18C
  2906                           
  2907                           	global	_EECON2
  2908                           	global	_EECON2
  2909  0000                     	_EECON2	set	0x18D
  2910                           
  2911                           	global	_EEDATA
  2912                           	global	_EEDATA
  2913  0000                     	_EEDATA	set	0x10C
  2914                           
  2915                           	global	_EEDATH
  2916                           	global	_EEDATH
  2917  0000                     	_EEDATH	set	0x10E
  2918                           
  2919                           	global	_FSR
  2920                           	global	_FSR
  2921  0000                     	_FSR	set	0x4
  2922                           
  2923                           	global	_INDF
  2924                           	global	_INDF
  2925  0000                     	_INDF	set	0x0
  2926                           
  2927                           	global	_INTCON
  2928  0000                     	_INTCON	set	0xB
  2929                           
  2930                           	global	_OPTION
  2931  0000                     	_OPTION	set	0x81
  2932                           
  2933                           	global	_PCL
  2934                           	global	_PCL
  2935  0000                     	_PCL	set	0x2
  2936                           
  2937                           	global	_PCLATH
  2938                           	global	_PCLATH
  2939  0000                     	_PCLATH	set	0xA
  2940                           
  2941                           	global	_PCON
  2942                           	global	_PCON
  2943  0000                     	_PCON	set	0x8E
  2944                           
  2945                           	global	_PIE1
  2946  0000                     	_PIE1	set	0x8C
  2947                           
  2948                           	global	_PIE2
  2949                           	global	_PIE2
  2950  0000                     	_PIE2	set	0x8D
  2951                           
  2952                           	global	_PIR1
  2953                           	global	_PIR1
  2954  0000                     	_PIR1	set	0xC
  2955                           
  2956                           	global	_PIR2
  2957                           	global	_PIR2
  2958  0000                     	_PIR2	set	0xD
  2959                           
  2960                           	global	_PORTA
  2961                           	global	_PORTA
  2962  0000                     	_PORTA	set	0x5
  2963                           
  2964                           	global	_PORTB
  2965  0000                     	_PORTB	set	0x6
  2966                           
  2967                           	global	_PORTC
  2968                           	global	_PORTC
  2969  0000                     	_PORTC	set	0x7
  2970                           
  2971                           	global	_PORTD
  2972                           	global	_PORTD
  2973  0000                     	_PORTD	set	0x8
  2974                           
  2975                           	global	_PORTE
  2976                           	global	_PORTE
  2977  0000                     	_PORTE	set	0x9
  2978                           
  2979                           	global	_PR2
  2980                           	global	_PR2
  2981  0000                     	_PR2	set	0x92
  2982                           
  2983                           	global	_RCREG
  2984  0000                     	_RCREG	set	0x1A
  2985                           
  2986                           	global	_RCSTA
  2987  0000                     	_RCSTA	set	0x18
  2988                           
  2989                           	global	_SPBRG
  2990  0000                     	_SPBRG	set	0x99
  2991                           
  2992                           	global	_SSPADD
  2993                           	global	_SSPADD
  2994  0000                     	_SSPADD	set	0x93
  2995                           
  2996                           	global	_SSPBUF
  2997                           	global	_SSPBUF
  2998  0000                     	_SSPBUF	set	0x13
  2999                           
  3000                           	global	_SSPCON
  3001                           	global	_SSPCON
  3002  0000                     	_SSPCON	set	0x14
  3003                           
  3004                           	global	_SSPCON2
  3005                           	global	_SSPCON2
  3006  0000                     	_SSPCON2	set	0x91
  3007                           
  3008                           	global	_SSPSTAT
  3009                           	global	_SSPSTAT
  3010  0000                     	_SSPSTAT	set	0x94
  3011                           
  3012                           	global	_STATUS
  3013                           	global	_STATUS
  3014  0000                     	_STATUS	set	0x3
  3015                           
  3016                           	global	_T1CON
  3017                           	global	_T1CON
  3018  0000                     	_T1CON	set	0x10
  3019                           
  3020                           	global	_T2CON
  3021                           	global	_T2CON
  3022  0000                     	_T2CON	set	0x12
  3023                           
  3024                           	global	_TMR0
  3025                           	global	_TMR0
  3026  0000                     	_TMR0	set	0x1
  3027                           
  3028                           	global	_TMR1H
  3029                           	global	_TMR1H
  3030  0000                     	_TMR1H	set	0xF
  3031                           
  3032                           	global	_TMR1L
  3033                           	global	_TMR1L
  3034  0000                     	_TMR1L	set	0xE
  3035                           
  3036                           	global	_TMR2
  3037                           	global	_TMR2
  3038  0000                     	_TMR2	set	0x11
  3039                           
  3040                           	global	_TRISA
  3041  0000                     	_TRISA	set	0x85
  3042                           
  3043                           	global	_TRISB
  3044  0000                     	_TRISB	set	0x86
  3045                           
  3046                           	global	_TRISC
  3047  0000                     	_TRISC	set	0x87
  3048                           
  3049                           	global	_TRISD
  3050  0000                     	_TRISD	set	0x88
  3051                           
  3052                           	global	_TRISE
  3053  0000                     	_TRISE	set	0x89
  3054                           
  3055                           	global	_TXREG
  3056  0000                     	_TXREG	set	0x19
  3057                           
  3058                           	global	_TXSTA
  3059  0000                     	_TXSTA	set	0x98
  3060                           
  3061                           	global	_ACKDT
  3062                           	global	_ACKDT
  3063  0000                     	_ACKDT	set	0x48D	;byte address: 0x91
  3064                           
  3065                           	global	_ACKEN
  3066                           	global	_ACKEN
  3067  0000                     	_ACKEN	set	0x48C	;byte address: 0x91
  3068                           
  3069                           	global	_ACKSTAT
  3070                           	global	_ACKSTAT
  3071  0000                     	_ACKSTAT	set	0x48E	;byte address: 0x91
  3072                           
  3073                           	global	_ADCS0
  3074                           	global	_ADCS0
  3075  0000                     	_ADCS0	set	0xFE	;byte address: 0x1F
  3076                           
  3077                           	global	_ADCS1
  3078                           	global	_ADCS1
  3079  0000                     	_ADCS1	set	0xFF	;byte address: 0x1F
  3080                           
  3081                           	global	_ADCS2
  3082                           	global	_ADCS2
  3083  0000                     	_ADCS2	set	0x4FE	;byte address: 0x9F
  3084                           
  3085                           	global	_ADDEN
  3086                           	global	_ADDEN
  3087  0000                     	_ADDEN	set	0xC3	;byte address: 0x18
  3088                           
  3089                           	global	_ADFM
  3090                           	global	_ADFM
  3091  0000                     	_ADFM	set	0x4FF	;byte address: 0x9F
  3092                           
  3093                           	global	_ADGO
  3094  0000                     	_ADGO	set	0xFA	;byte address: 0x1F
  3095                           
  3096                           	global	_ADIE
  3097  0000                     	_ADIE	set	0x466	;byte address: 0x8C
  3098                           
  3099                           	global	_ADIF
  3100  0000                     	_ADIF	set	0x66	;byte address: 0xC
  3101                           
  3102                           	global	_ADON
  3103                           	global	_ADON
  3104  0000                     	_ADON	set	0xF8	;byte address: 0x1F
  3105                           
  3106                           	global	_BCLIE
  3107                           	global	_BCLIE
  3108  0000                     	_BCLIE	set	0x46B	;byte address: 0x8D
  3109                           
  3110                           	global	_BCLIF
  3111                           	global	_BCLIF
  3112  0000                     	_BCLIF	set	0x6B	;byte address: 0xD
  3113                           
  3114                           	global	_BF
  3115                           	global	_BF
  3116  0000                     	_BF	set	0x4A0	;byte address: 0x94
  3117                           
  3118                           	global	_BOR
  3119                           	global	_BOR
  3120  0000                     	_BOR	set	0x470	;byte address: 0x8E
  3121                           
  3122                           	global	_BRGH
  3123                           	global	_BRGH
  3124  0000                     	_BRGH	set	0x4C2	;byte address: 0x98
  3125                           
  3126                           	global	_C1INV
  3127                           	global	_C1INV
  3128  0000                     	_C1INV	set	0x4E4	;byte address: 0x9C
  3129                           
  3130                           	global	_C1OUT
  3131                           	global	_C1OUT
  3132  0000                     	_C1OUT	set	0x4E6	;byte address: 0x9C
  3133                           
  3134                           	global	_C2INV
  3135                           	global	_C2INV
  3136  0000                     	_C2INV	set	0x4E5	;byte address: 0x9C
  3137                           
  3138                           	global	_C2OUT
  3139                           	global	_C2OUT
  3140  0000                     	_C2OUT	set	0x4E7	;byte address: 0x9C
  3141                           
  3142                           	global	_CARRY
  3143                           	global	_CARRY
  3144  0000                     	_CARRY	set	0x18	;byte address: 0x3
  3145                           
  3146                           	global	_CCP1IE
  3147                           	global	_CCP1IE
  3148  0000                     	_CCP1IE	set	0x462	;byte address: 0x8C
  3149                           
  3150                           	global	_CCP1IF
  3151                           	global	_CCP1IF
  3152  0000                     	_CCP1IF	set	0x62	;byte address: 0xC
  3153                           
  3154                           	global	_CCP1M0
  3155                           	global	_CCP1M0
  3156  0000                     	_CCP1M0	set	0xB8	;byte address: 0x17
  3157                           
  3158                           	global	_CCP1M1
  3159                           	global	_CCP1M1
  3160  0000                     	_CCP1M1	set	0xB9	;byte address: 0x17
  3161                           
  3162                           	global	_CCP1M2
  3163                           	global	_CCP1M2
  3164  0000                     	_CCP1M2	set	0xBA	;byte address: 0x17
  3165                           
  3166                           	global	_CCP1M3
  3167                           	global	_CCP1M3
  3168  0000                     	_CCP1M3	set	0xBB	;byte address: 0x17
  3169                           
  3170                           	global	_CCP1X
  3171                           	global	_CCP1X
  3172  0000                     	_CCP1X	set	0xBD	;byte address: 0x17
  3173                           
  3174                           	global	_CCP1Y
  3175                           	global	_CCP1Y
  3176  0000                     	_CCP1Y	set	0xBC	;byte address: 0x17
  3177                           
  3178                           	global	_CCP2IE
  3179                           	global	_CCP2IE
  3180  0000                     	_CCP2IE	set	0x468	;byte address: 0x8D
  3181                           
  3182                           	global	_CCP2IF
  3183                           	global	_CCP2IF
  3184  0000                     	_CCP2IF	set	0x68	;byte address: 0xD
  3185                           
  3186                           	global	_CCP2M0
  3187                           	global	_CCP2M0
  3188  0000                     	_CCP2M0	set	0xE8	;byte address: 0x1D
  3189                           
  3190                           	global	_CCP2M1
  3191                           	global	_CCP2M1
  3192  0000                     	_CCP2M1	set	0xE9	;byte address: 0x1D
  3193                           
  3194                           	global	_CCP2M2
  3195                           	global	_CCP2M2
  3196  0000                     	_CCP2M2	set	0xEA	;byte address: 0x1D
  3197                           
  3198                           	global	_CCP2M3
  3199                           	global	_CCP2M3
  3200  0000                     	_CCP2M3	set	0xEB	;byte address: 0x1D
  3201                           
  3202                           	global	_CCP2X
  3203                           	global	_CCP2X
  3204  0000                     	_CCP2X	set	0xED	;byte address: 0x1D
  3205                           
  3206                           	global	_CCP2Y
  3207                           	global	_CCP2Y
  3208  0000                     	_CCP2Y	set	0xEC	;byte address: 0x1D
  3209                           
  3210                           	global	_CHS0
  3211                           	global	_CHS0
  3212  0000                     	_CHS0	set	0xFB	;byte address: 0x1F
  3213                           
  3214                           	global	_CHS1
  3215                           	global	_CHS1
  3216  0000                     	_CHS1	set	0xFC	;byte address: 0x1F
  3217                           
  3218                           	global	_CHS2
  3219                           	global	_CHS2
  3220  0000                     	_CHS2	set	0xFD	;byte address: 0x1F
  3221                           
  3222                           	global	_CIS
  3223                           	global	_CIS
  3224  0000                     	_CIS	set	0x4E3	;byte address: 0x9C
  3225                           
  3226                           	global	_CKE
  3227                           	global	_CKE
  3228  0000                     	_CKE	set	0x4A6	;byte address: 0x94
  3229                           
  3230                           	global	_CKP
  3231                           	global	_CKP
  3232  0000                     	_CKP	set	0xA4	;byte address: 0x14
  3233                           
  3234                           	global	_CM0
  3235                           	global	_CM0
  3236  0000                     	_CM0	set	0x4E0	;byte address: 0x9C
  3237                           
  3238                           	global	_CM1
  3239                           	global	_CM1
  3240  0000                     	_CM1	set	0x4E1	;byte address: 0x9C
  3241                           
  3242                           	global	_CM2
  3243                           	global	_CM2
  3244  0000                     	_CM2	set	0x4E2	;byte address: 0x9C
  3245                           
  3246                           	global	_CMIE
  3247                           	global	_CMIE
  3248  0000                     	_CMIE	set	0x46E	;byte address: 0x8D
  3249                           
  3250                           	global	_CMIF
  3251                           	global	_CMIF
  3252  0000                     	_CMIF	set	0x6E	;byte address: 0xD
  3253                           
  3254                           	global	_CREN
  3255                           	global	_CREN
  3256  0000                     	_CREN	set	0xC4	;byte address: 0x18
  3257                           
  3258                           	global	_CSRC
  3259                           	global	_CSRC
  3260  0000                     	_CSRC	set	0x4C7	;byte address: 0x98
  3261                           
  3262                           	global	_CVR0
  3263                           	global	_CVR0
  3264  0000                     	_CVR0	set	0x4E8	;byte address: 0x9D
  3265                           
  3266                           	global	_CVR1
  3267                           	global	_CVR1
  3268  0000                     	_CVR1	set	0x4E9	;byte address: 0x9D
  3269                           
  3270                           	global	_CVR2
  3271                           	global	_CVR2
  3272  0000                     	_CVR2	set	0x4EA	;byte address: 0x9D
  3273                           
  3274                           	global	_CVR3
  3275                           	global	_CVR3
  3276  0000                     	_CVR3	set	0x4EB	;byte address: 0x9D
  3277                           
  3278                           	global	_CVREN
  3279                           	global	_CVREN
  3280  0000                     	_CVREN	set	0x4EF	;byte address: 0x9D
  3281                           
  3282                           	global	_CVROE
  3283                           	global	_CVROE
  3284  0000                     	_CVROE	set	0x4EE	;byte address: 0x9D
  3285                           
  3286                           	global	_CVRR
  3287                           	global	_CVRR
  3288  0000                     	_CVRR	set	0x4ED	;byte address: 0x9D
  3289                           
  3290                           	global	_DA
  3291                           	global	_DA
  3292  0000                     	_DA	set	0x4A5	;byte address: 0x94
  3293                           
  3294                           	global	_DC
  3295                           	global	_DC
  3296  0000                     	_DC	set	0x19	;byte address: 0x3
  3297                           
  3298                           	global	_EEIE
  3299                           	global	_EEIE
  3300  0000                     	_EEIE	set	0x46C	;byte address: 0x8D
  3301                           
  3302                           	global	_EEIF
  3303                           	global	_EEIF
  3304  0000                     	_EEIF	set	0x6C	;byte address: 0xD
  3305                           
  3306                           	global	_EEPGD
  3307                           	global	_EEPGD
  3308  0000                     	_EEPGD	set	0xC67	;byte address: 0x18C
  3309                           
  3310                           	global	_FERR
  3311                           	global	_FERR
  3312  0000                     	_FERR	set	0xC2	;byte address: 0x18
  3313                           
  3314                           	global	_GCEN
  3315                           	global	_GCEN
  3316  0000                     	_GCEN	set	0x48F	;byte address: 0x91
  3317                           
  3318                           	global	_GIE
  3319  0000                     	_GIE	set	0x5F	;byte address: 0xB
  3320                           
  3321                           	global	_GODONE
  3322                           	global	_GODONE
  3323  0000                     	_GODONE	set	0xFA	;byte address: 0x1F
  3324                           
  3325                           	global	_IBF
  3326                           	global	_IBF
  3327  0000                     	_IBF	set	0x44F	;byte address: 0x89
  3328                           
  3329                           	global	_IBOV
  3330                           	global	_IBOV
  3331  0000                     	_IBOV	set	0x44D	;byte address: 0x89
  3332                           
  3333                           	global	_INTE
  3334  0000                     	_INTE	set	0x5C	;byte address: 0xB
  3335                           
  3336                           	global	_INTEDG
  3337                           	global	_INTEDG
  3338  0000                     	_INTEDG	set	0x40E	;byte address: 0x81
  3339                           
  3340                           	global	_INTF
  3341  0000                     	_INTF	set	0x59	;byte address: 0xB
  3342                           
  3343                           	global	_IRP
  3344                           	global	_IRP
  3345  0000                     	_IRP	set	0x1F	;byte address: 0x3
  3346                           
  3347                           	global	_OBF
  3348                           	global	_OBF
  3349  0000                     	_OBF	set	0x44E	;byte address: 0x89
  3350                           
  3351                           	global	_OERR
  3352                           	global	_OERR
  3353  0000                     	_OERR	set	0xC1	;byte address: 0x18
  3354                           
  3355                           	global	_PCFG0
  3356                           	global	_PCFG0
  3357  0000                     	_PCFG0	set	0x4F8	;byte address: 0x9F
  3358                           
  3359                           	global	_PCFG1
  3360                           	global	_PCFG1
  3361  0000                     	_PCFG1	set	0x4F9	;byte address: 0x9F
  3362                           
  3363                           	global	_PCFG2
  3364                           	global	_PCFG2
  3365  0000                     	_PCFG2	set	0x4FA	;byte address: 0x9F
  3366                           
  3367                           	global	_PCFG3
  3368                           	global	_PCFG3
  3369  0000                     	_PCFG3	set	0x4FB	;byte address: 0x9F
  3370                           
  3371                           	global	_PD
  3372                           	global	_PD
  3373  0000                     	_PD	set	0x1B	;byte address: 0x3
  3374                           
  3375                           	global	_PEIE
  3376  0000                     	_PEIE	set	0x5E	;byte address: 0xB
  3377                           
  3378                           	global	_PEN
  3379                           	global	_PEN
  3380  0000                     	_PEN	set	0x48A	;byte address: 0x91
  3381                           
  3382                           	global	_POR
  3383                           	global	_POR
  3384  0000                     	_POR	set	0x471	;byte address: 0x8E
  3385                           
  3386                           	global	_PS0
  3387                           	global	_PS0
  3388  0000                     	_PS0	set	0x408	;byte address: 0x81
  3389                           
  3390                           	global	_PS1
  3391                           	global	_PS1
  3392  0000                     	_PS1	set	0x409	;byte address: 0x81
  3393                           
  3394                           	global	_PS2
  3395                           	global	_PS2
  3396  0000                     	_PS2	set	0x40A	;byte address: 0x81
  3397                           
  3398                           	global	_PSA
  3399                           	global	_PSA
  3400  0000                     	_PSA	set	0x40B	;byte address: 0x81
  3401                           
  3402                           	global	_PSPIE
  3403                           	global	_PSPIE
  3404  0000                     	_PSPIE	set	0x467	;byte address: 0x8C
  3405                           
  3406                           	global	_PSPIF
  3407                           	global	_PSPIF
  3408  0000                     	_PSPIF	set	0x67	;byte address: 0xC
  3409                           
  3410                           	global	_PSPMODE
  3411                           	global	_PSPMODE
  3412  0000                     	_PSPMODE	set	0x44C	;byte address: 0x89
  3413                           
  3414                           	global	_RA0
  3415                           	global	_RA0
  3416  0000                     	_RA0	set	0x28	;byte address: 0x5
  3417                           
  3418                           	global	_RA1
  3419                           	global	_RA1
  3420  0000                     	_RA1	set	0x29	;byte address: 0x5
  3421                           
  3422                           	global	_RA2
  3423                           	global	_RA2
  3424  0000                     	_RA2	set	0x2A	;byte address: 0x5
  3425                           
  3426                           	global	_RA3
  3427                           	global	_RA3
  3428  0000                     	_RA3	set	0x2B	;byte address: 0x5
  3429                           
  3430                           	global	_RA4
  3431                           	global	_RA4
  3432  0000                     	_RA4	set	0x2C	;byte address: 0x5
  3433                           
  3434                           	global	_RA5
  3435                           	global	_RA5
  3436  0000                     	_RA5	set	0x2D	;byte address: 0x5
  3437                           
  3438                           	global	_RB0
  3439                           	global	_RB0
  3440  0000                     	_RB0	set	0x30	;byte address: 0x6
  3441                           
  3442                           	global	_RB1
  3443  0000                     	_RB1	set	0x31	;byte address: 0x6
  3444                           
  3445                           	global	_RB2
  3446  0000                     	_RB2	set	0x32	;byte address: 0x6
  3447                           
  3448                           	global	_RB3
  3449  0000                     	_RB3	set	0x33	;byte address: 0x6
  3450                           
  3451                           	global	_RB4
  3452                           	global	_RB4
  3453  0000                     	_RB4	set	0x34	;byte address: 0x6
  3454                           
  3455                           	global	_RB5
  3456                           	global	_RB5
  3457  0000                     	_RB5	set	0x35	;byte address: 0x6
  3458                           
  3459                           	global	_RB6
  3460                           	global	_RB6
  3461  0000                     	_RB6	set	0x36	;byte address: 0x6
  3462                           
  3463                           	global	_RB7
  3464                           	global	_RB7
  3465  0000                     	_RB7	set	0x37	;byte address: 0x6
  3466                           
  3467                           	global	_RBIE
  3468  0000                     	_RBIE	set	0x5B	;byte address: 0xB
  3469                           
  3470                           	global	_RBIF
  3471  0000                     	_RBIF	set	0x58	;byte address: 0xB
  3472                           
  3473                           	global	_RBPU
  3474                           	global	_RBPU
  3475  0000                     	_RBPU	set	0x40F	;byte address: 0x81
  3476                           
  3477                           	global	_RC0
  3478                           	global	_RC0
  3479  0000                     	_RC0	set	0x38	;byte address: 0x7
  3480                           
  3481                           	global	_RC1
  3482                           	global	_RC1
  3483  0000                     	_RC1	set	0x39	;byte address: 0x7
  3484                           
  3485                           	global	_RC2
  3486                           	global	_RC2
  3487  0000                     	_RC2	set	0x3A	;byte address: 0x7
  3488                           
  3489                           	global	_RC3
  3490                           	global	_RC3
  3491  0000                     	_RC3	set	0x3B	;byte address: 0x7
  3492                           
  3493                           	global	_RC4
  3494                           	global	_RC4
  3495  0000                     	_RC4	set	0x3C	;byte address: 0x7
  3496                           
  3497                           	global	_RC5
  3498                           	global	_RC5
  3499  0000                     	_RC5	set	0x3D	;byte address: 0x7
  3500                           
  3501                           	global	_RC6
  3502                           	global	_RC6
  3503  0000                     	_RC6	set	0x3E	;byte address: 0x7
  3504                           
  3505                           	global	_RC7
  3506                           	global	_RC7
  3507  0000                     	_RC7	set	0x3F	;byte address: 0x7
  3508                           
  3509                           	global	_RCEN
  3510                           	global	_RCEN
  3511  0000                     	_RCEN	set	0x48B	;byte address: 0x91
  3512                           
  3513                           	global	_RCIE
  3514  0000                     	_RCIE	set	0x465	;byte address: 0x8C
  3515                           
  3516                           	global	_RCIF
  3517  0000                     	_RCIF	set	0x65	;byte address: 0xC
  3518                           
  3519                           	global	_RD
  3520                           	global	_RD
  3521  0000                     	_RD	set	0xC60	;byte address: 0x18C
  3522                           
  3523                           	global	_RD0
  3524                           	global	_RD0
  3525  0000                     	_RD0	set	0x40	;byte address: 0x8
  3526                           
  3527                           	global	_RD1
  3528                           	global	_RD1
  3529  0000                     	_RD1	set	0x41	;byte address: 0x8
  3530                           
  3531                           	global	_RD2
  3532                           	global	_RD2
  3533  0000                     	_RD2	set	0x42	;byte address: 0x8
  3534                           
  3535                           	global	_RD3
  3536                           	global	_RD3
  3537  0000                     	_RD3	set	0x43	;byte address: 0x8
  3538                           
  3539                           	global	_RD4
  3540                           	global	_RD4
  3541  0000                     	_RD4	set	0x44	;byte address: 0x8
  3542                           
  3543                           	global	_RD5
  3544                           	global	_RD5
  3545  0000                     	_RD5	set	0x45	;byte address: 0x8
  3546                           
  3547                           	global	_RD6
  3548                           	global	_RD6
  3549  0000                     	_RD6	set	0x46	;byte address: 0x8
  3550                           
  3551                           	global	_RD7
  3552                           	global	_RD7
  3553  0000                     	_RD7	set	0x47	;byte address: 0x8
  3554                           
  3555                           	global	_RE0
  3556                           	global	_RE0
  3557  0000                     	_RE0	set	0x48	;byte address: 0x9
  3558                           
  3559                           	global	_RE1
  3560                           	global	_RE1
  3561  0000                     	_RE1	set	0x49	;byte address: 0x9
  3562                           
  3563                           	global	_RE2
  3564                           	global	_RE2
  3565  0000                     	_RE2	set	0x4A	;byte address: 0x9
  3566                           
  3567                           	global	_RP0
  3568                           	global	_RP0
  3569  0000                     	_RP0	set	0x1D	;byte address: 0x3
  3570                           
  3571                           	global	_RP1
  3572                           	global	_RP1
  3573  0000                     	_RP1	set	0x1E	;byte address: 0x3
  3574                           
  3575                           	global	_RSEN
  3576                           	global	_RSEN
  3577  0000                     	_RSEN	set	0x489	;byte address: 0x91
  3578                           
  3579                           	global	_RW
  3580                           	global	_RW
  3581  0000                     	_RW	set	0x4A2	;byte address: 0x94
  3582                           
  3583                           	global	_RX9
  3584                           	global	_RX9
  3585  0000                     	_RX9	set	0xC6	;byte address: 0x18
  3586                           
  3587                           	global	_RX9D
  3588                           	global	_RX9D
  3589  0000                     	_RX9D	set	0xC0	;byte address: 0x18
  3590                           
  3591                           	global	_SEN
  3592                           	global	_SEN
  3593  0000                     	_SEN	set	0x488	;byte address: 0x91
  3594                           
  3595                           	global	_SMP
  3596                           	global	_SMP
  3597  0000                     	_SMP	set	0x4A7	;byte address: 0x94
  3598                           
  3599                           	global	_SPEN
  3600                           	global	_SPEN
  3601  0000                     	_SPEN	set	0xC7	;byte address: 0x18
  3602                           
  3603                           	global	_SREN
  3604                           	global	_SREN
  3605  0000                     	_SREN	set	0xC5	;byte address: 0x18
  3606                           
  3607                           	global	_SSPEN
  3608                           	global	_SSPEN
  3609  0000                     	_SSPEN	set	0xA5	;byte address: 0x14
  3610                           
  3611                           	global	_SSPIE
  3612                           	global	_SSPIE
  3613  0000                     	_SSPIE	set	0x463	;byte address: 0x8C
  3614                           
  3615                           	global	_SSPIF
  3616                           	global	_SSPIF
  3617  0000                     	_SSPIF	set	0x63	;byte address: 0xC
  3618                           
  3619                           	global	_SSPM0
  3620                           	global	_SSPM0
  3621  0000                     	_SSPM0	set	0xA0	;byte address: 0x14
  3622                           
  3623                           	global	_SSPM1
  3624                           	global	_SSPM1
  3625  0000                     	_SSPM1	set	0xA1	;byte address: 0x14
  3626                           
  3627                           	global	_SSPM2
  3628                           	global	_SSPM2
  3629  0000                     	_SSPM2	set	0xA2	;byte address: 0x14
  3630                           
  3631                           	global	_SSPM3
  3632                           	global	_SSPM3
  3633  0000                     	_SSPM3	set	0xA3	;byte address: 0x14
  3634                           
  3635                           	global	_SSPOV
  3636                           	global	_SSPOV
  3637  0000                     	_SSPOV	set	0xA6	;byte address: 0x14
  3638                           
  3639                           	global	_START
  3640                           	global	_START
  3641  0000                     	_START	set	0x4A3	;byte address: 0x94
  3642                           
  3643                           	global	_STOP
  3644                           	global	_STOP
  3645  0000                     	_STOP	set	0x4A4	;byte address: 0x94
  3646                           
  3647                           	global	_SYNC
  3648                           	global	_SYNC
  3649  0000                     	_SYNC	set	0x4C4	;byte address: 0x98
  3650                           
  3651                           	global	_T0CS
  3652                           	global	_T0CS
  3653  0000                     	_T0CS	set	0x40D	;byte address: 0x81
  3654                           
  3655                           	global	_T0IE
  3656                           	global	_T0IE
  3657  0000                     	_T0IE	set	0x5D	;byte address: 0xB
  3658                           
  3659                           	global	_T0IF
  3660                           	global	_T0IF
  3661  0000                     	_T0IF	set	0x5A	;byte address: 0xB
  3662                           
  3663                           	global	_T0SE
  3664                           	global	_T0SE
  3665  0000                     	_T0SE	set	0x40C	;byte address: 0x81
  3666                           
  3667                           	global	_T1CKPS0
  3668                           	global	_T1CKPS0
  3669  0000                     	_T1CKPS0	set	0x84	;byte address: 0x10
  3670                           
  3671                           	global	_T1CKPS1
  3672                           	global	_T1CKPS1
  3673  0000                     	_T1CKPS1	set	0x85	;byte address: 0x10
  3674                           
  3675                           	global	_T1OSCEN
  3676                           	global	_T1OSCEN
  3677  0000                     	_T1OSCEN	set	0x83	;byte address: 0x10
  3678                           
  3679                           	global	_T1SYNC
  3680                           	global	_T1SYNC
  3681  0000                     	_T1SYNC	set	0x82	;byte address: 0x10
  3682                           
  3683                           	global	_T2CKPS0
  3684                           	global	_T2CKPS0
  3685  0000                     	_T2CKPS0	set	0x90	;byte address: 0x12
  3686                           
  3687                           	global	_T2CKPS1
  3688                           	global	_T2CKPS1
  3689  0000                     	_T2CKPS1	set	0x91	;byte address: 0x12
  3690                           
  3691                           	global	_TMR0IE
  3692                           	global	_TMR0IE
  3693  0000                     	_TMR0IE	set	0x5D	;byte address: 0xB
  3694                           
  3695                           	global	_TMR0IF
  3696                           	global	_TMR0IF
  3697  0000                     	_TMR0IF	set	0x5A	;byte address: 0xB
  3698                           
  3699                           	global	_TMR1CS
  3700                           	global	_TMR1CS
  3701  0000                     	_TMR1CS	set	0x81	;byte address: 0x10
  3702                           
  3703                           	global	_TMR1IE
  3704                           	global	_TMR1IE
  3705  0000                     	_TMR1IE	set	0x460	;byte address: 0x8C
  3706                           
  3707                           	global	_TMR1IF
  3708                           	global	_TMR1IF
  3709  0000                     	_TMR1IF	set	0x60	;byte address: 0xC
  3710                           
  3711                           	global	_TMR1ON
  3712                           	global	_TMR1ON
  3713  0000                     	_TMR1ON	set	0x80	;byte address: 0x10
  3714                           
  3715                           	global	_TMR2IE
  3716                           	global	_TMR2IE
  3717  0000                     	_TMR2IE	set	0x461	;byte address: 0x8C
  3718                           
  3719                           	global	_TMR2IF
  3720                           	global	_TMR2IF
  3721  0000                     	_TMR2IF	set	0x61	;byte address: 0xC
  3722                           
  3723                           	global	_TMR2ON
  3724                           	global	_TMR2ON
  3725  0000                     	_TMR2ON	set	0x92	;byte address: 0x12
  3726                           
  3727                           	global	_TO
  3728                           	global	_TO
  3729  0000                     	_TO	set	0x1C	;byte address: 0x3
  3730                           
  3731                           	global	_TOUTPS0
  3732                           	global	_TOUTPS0
  3733  0000                     	_TOUTPS0	set	0x93	;byte address: 0x12
  3734                           
  3735                           	global	_TOUTPS1
  3736                           	global	_TOUTPS1
  3737  0000                     	_TOUTPS1	set	0x94	;byte address: 0x12
  3738                           
  3739                           	global	_TOUTPS2
  3740                           	global	_TOUTPS2
  3741  0000                     	_TOUTPS2	set	0x95	;byte address: 0x12
  3742                           
  3743                           	global	_TOUTPS3
  3744                           	global	_TOUTPS3
  3745  0000                     	_TOUTPS3	set	0x96	;byte address: 0x12
  3746                           
  3747                           	global	_TRISA0
  3748                           	global	_TRISA0
  3749  0000                     	_TRISA0	set	0x428	;byte address: 0x85
  3750                           
  3751                           	global	_TRISA1
  3752                           	global	_TRISA1
  3753  0000                     	_TRISA1	set	0x429	;byte address: 0x85
  3754                           
  3755                           	global	_TRISA2
  3756                           	global	_TRISA2
  3757  0000                     	_TRISA2	set	0x42A	;byte address: 0x85
  3758                           
  3759                           	global	_TRISA3
  3760                           	global	_TRISA3
  3761  0000                     	_TRISA3	set	0x42B	;byte address: 0x85
  3762                           
  3763                           	global	_TRISA4
  3764                           	global	_TRISA4
  3765  0000                     	_TRISA4	set	0x42C	;byte address: 0x85
  3766                           
  3767                           	global	_TRISA5
  3768                           	global	_TRISA5
  3769  0000                     	_TRISA5	set	0x42D	;byte address: 0x85
  3770                           
  3771                           	global	_TRISB0
  3772                           	global	_TRISB0
  3773  0000                     	_TRISB0	set	0x430	;byte address: 0x86
  3774                           
  3775                           	global	_TRISB1
  3776                           	global	_TRISB1
  3777  0000                     	_TRISB1	set	0x431	;byte address: 0x86
  3778                           
  3779                           	global	_TRISB2
  3780                           	global	_TRISB2
  3781  0000                     	_TRISB2	set	0x432	;byte address: 0x86
  3782                           
  3783                           	global	_TRISB3
  3784                           	global	_TRISB3
  3785  0000                     	_TRISB3	set	0x433	;byte address: 0x86
  3786                           
  3787                           	global	_TRISB4
  3788                           	global	_TRISB4
  3789  0000                     	_TRISB4	set	0x434	;byte address: 0x86
  3790                           
  3791                           	global	_TRISB5
  3792                           	global	_TRISB5
  3793  0000                     	_TRISB5	set	0x435	;byte address: 0x86
  3794                           
  3795                           	global	_TRISB6
  3796                           	global	_TRISB6
  3797  0000                     	_TRISB6	set	0x436	;byte address: 0x86
  3798                           
  3799                           	global	_TRISB7
  3800                           	global	_TRISB7
  3801  0000                     	_TRISB7	set	0x437	;byte address: 0x86
  3802                           
  3803                           	global	_TRISC0
  3804                           	global	_TRISC0
  3805  0000                     	_TRISC0	set	0x438	;byte address: 0x87
  3806                           
  3807                           	global	_TRISC1
  3808                           	global	_TRISC1
  3809  0000                     	_TRISC1	set	0x439	;byte address: 0x87
  3810                           
  3811                           	global	_TRISC2
  3812                           	global	_TRISC2
  3813  0000                     	_TRISC2	set	0x43A	;byte address: 0x87
  3814                           
  3815                           	global	_TRISC3
  3816                           	global	_TRISC3
  3817  0000                     	_TRISC3	set	0x43B	;byte address: 0x87
  3818                           
  3819                           	global	_TRISC4
  3820                           	global	_TRISC4
  3821  0000                     	_TRISC4	set	0x43C	;byte address: 0x87
  3822                           
  3823                           	global	_TRISC5
  3824                           	global	_TRISC5
  3825  0000                     	_TRISC5	set	0x43D	;byte address: 0x87
  3826                           
  3827                           	global	_TRISC6
  3828                           	global	_TRISC6
  3829  0000                     	_TRISC6	set	0x43E	;byte address: 0x87
  3830                           
  3831                           	global	_TRISC7
  3832                           	global	_TRISC7
  3833  0000                     	_TRISC7	set	0x43F	;byte address: 0x87
  3834                           
  3835                           	global	_TRISD0
  3836                           	global	_TRISD0
  3837  0000                     	_TRISD0	set	0x440	;byte address: 0x88
  3838                           
  3839                           	global	_TRISD1
  3840                           	global	_TRISD1
  3841  0000                     	_TRISD1	set	0x441	;byte address: 0x88
  3842                           
  3843                           	global	_TRISD2
  3844                           	global	_TRISD2
  3845  0000                     	_TRISD2	set	0x442	;byte address: 0x88
  3846                           
  3847                           	global	_TRISD3
  3848                           	global	_TRISD3
  3849  0000                     	_TRISD3	set	0x443	;byte address: 0x88
  3850                           
  3851                           	global	_TRISD4
  3852                           	global	_TRISD4
  3853  0000                     	_TRISD4	set	0x444	;byte address: 0x88
  3854                           
  3855                           	global	_TRISD5
  3856                           	global	_TRISD5
  3857  0000                     	_TRISD5	set	0x445	;byte address: 0x88
  3858                           
  3859                           	global	_TRISD6
  3860                           	global	_TRISD6
  3861  0000                     	_TRISD6	set	0x446	;byte address: 0x88
  3862                           
  3863                           	global	_TRISD7
  3864                           	global	_TRISD7
  3865  0000                     	_TRISD7	set	0x447	;byte address: 0x88
  3866                           
  3867                           	global	_TRISE0
  3868                           	global	_TRISE0
  3869  0000                     	_TRISE0	set	0x448	;byte address: 0x89
  3870                           
  3871                           	global	_TRISE1
  3872                           	global	_TRISE1
  3873  0000                     	_TRISE1	set	0x449	;byte address: 0x89
  3874                           
  3875                           	global	_TRISE2
  3876                           	global	_TRISE2
  3877  0000                     	_TRISE2	set	0x44A	;byte address: 0x89
  3878                           
  3879                           	global	_TRMT
  3880                           	global	_TRMT
  3881  0000                     	_TRMT	set	0x4C1	;byte address: 0x98
  3882                           
  3883                           	global	_TX9
  3884                           	global	_TX9
  3885  0000                     	_TX9	set	0x4C6	;byte address: 0x98
  3886                           
  3887                           	global	_TX9D
  3888                           	global	_TX9D
  3889  0000                     	_TX9D	set	0x4C0	;byte address: 0x98
  3890                           
  3891                           	global	_TXEN
  3892                           	global	_TXEN
  3893  0000                     	_TXEN	set	0x4C5	;byte address: 0x98
  3894                           
  3895                           	global	_TXIE
  3896                           	global	_TXIE
  3897  0000                     	_TXIE	set	0x464	;byte address: 0x8C
  3898                           
  3899                           	global	_TXIF
  3900  0000                     	_TXIF	set	0x64	;byte address: 0xC
  3901                           
  3902                           	global	_UA
  3903                           	global	_UA
  3904  0000                     	_UA	set	0x4A1	;byte address: 0x94
  3905                           
  3906                           	global	_WCOL
  3907                           	global	_WCOL
  3908  0000                     	_WCOL	set	0xA7	;byte address: 0x14
  3909                           
  3910                           	global	_WR
  3911                           	global	_WR
  3912  0000                     	_WR	set	0xC61	;byte address: 0x18C
  3913                           
  3914                           	global	_WREN
  3915                           	global	_WREN
  3916  0000                     	_WREN	set	0xC62	;byte address: 0x18C
  3917                           
  3918                           	global	_WRERR
  3919                           	global	_WRERR
  3920  0000                     	_WRERR	set	0xC63	;byte address: 0x18C
  3921                           
  3922                           	global	_ZERO
  3923                           	global	_ZERO
  3924  0000                     	_ZERO	set	0x1A	;byte address: 0x3
  3925                           
  3926                           	PSECT	fnauto0,class=BANK0,space=1
  3927                           	FNCONF	fnauto0,??,?
  3928                           
  3929                           	DABS	1,126,2	;btemp
  3930                           	global	btemp
  3931  0000                     	btemp set 07Eh
  3932                           apbank macro
  3933                           	bcf	status,5
  3934                           	bcf	status,6
  3935  0049                     	endm


HI-TECH Software PICC Macro Assembler V9.60PL5 build 3884 
Symbol Table                                          Sun May  3 13:47:25 2009

            ??_in_pending 004C                  __Lrbss_0 003E  
                __Lrbss_1 00C0                  __Lrbss_2 0140  
                       l2 03B1                         l3 03AA  
                       l4 03A9                         l5 03AE  
               __Lrdata_0 0000                 __Lramdata 0000  
                      l20 03C0                        _DA 04A5  
                      _BF 04A0                        l30 01CC  
                      _DC 0019                        l31 01F6  
                      l40 0090                        l33 035F  
                      l41 0085                        l34 0319  
                      l42 0090                        l36 0090  
                      l29 01F6                        l53 02F6  
                      l37 0049                        l70 0397  
                      l54 03A6                        l55 03A3  
                      l39 005D                        l72 0394  
                      l64 03BA                        l73 0382  
                      l65 033C                        l49 0224  
                      l74 038B                        l75 0250  
                      l77 0249                        l78 022B  
                      l79 0235                        _PD 001B  
                      _RD 0C60                        _UA 04A1  
                      _TO 001C                        _RW 04A2  
                      _WR 0C61             _rof_interrupt 00E9  
                      fsr 0004             ?_sb_interrupt 005D  
                     _CM0 04E0                       _CM1 04E1  
                     _CM2 04E2                       _CKE 04A6  
                     _IBF 044F                       _CIS 04E3  
                     _CKP 00A4                       _GIE 005F  
                     _BOR 0470                       _RA0 0028  
                     _RA1 0029                       _RB0 0030  
                     _RA2 002A                       _RB1 0031  
                     _RA3 002B                       _RC0 0038  
                     _RB2 0032                       _RA4 002C  
                     _RC1 0039                       _RB3 0033  
                     _RA5 002D                       _RD0 0040  
                     _RC2 003A                       _RB4 0034  
                     _RD1 0041                       _RC3 003B  
                     _RB5 0035                       _RE0 0048  
                     _RD2 0042                       _RC4 003C  
                     _RB6 0036                       _RE1 0049  
                     _RD3 0043                       _RC5 003D  
                     _RB7 0037                       _RE2 004A  
                     _RD4 0044                       _RC6 003E  
                     _RD5 0045                       _RC7 003F  
                     _RD6 0046                       _OBF 044E  
                     _RD7 0047                       _FSR 0004  
                     _PCL 0002                       _PS0 0408  
                     _PR2 0092                       _PS1 0409  
                     _RP0 001D                       _PS2 040A  
                     _PEN 048A                       _IRP 001F  
                     _RP1 001E                       _SEN 0488  
                     u750 0386                       _PSA 040B  
                     u751 0385                       u760 0394  
                     u761 0393                       _POR 0471  
                     _RX9 00C6                       _SMP 04A7  
                     _TX9 04C6             _adc_interrupt 013D  
                _adc_read 031A             ??_adc_advance 004C  
        _rof_write_byte_i 0052                       indf 0000  
               ?_adc_read 004C       _adc_interrupt_entry 0061  
   __end_of_rof_interrupt 013D    _rof_send_packet_packet 004C  
              ??_adc_read 004C       i1___bmul_multiplier 006B  
                    _ADIE 0466                      _ADIF 0066  
                    _ADFM 04FF                      _ADGO 00FA  
                __tempreg 0049                      _ADON 00F8  
                    _CHS0 00FB                      _CHS1 00FC  
                    _CHS2 00FD                      _EEIE 046C  
                    _EEIF 006C                  _bitcount 0072  
                    _GCEN 048F                      _CMIE 046E  
                    _CMIF 006E                      _BRGH 04C2  
                    _T0IE 005D                      _T0IF 005A  
                    _CREN 00C4                      _T0CS 040D  
                    _FERR 00C2                      _IBOV 044D  
                    _CVR0 04E8                      _CVR1 04E9  
                    _CVR2 04EA                      _CVR3 04EB  
                    u2120 0249                      u2121 0248  
                    u2105 0236                      u2130 004F  
                    _T0SE 040C                      _CSRC 04C7  
                    u2115 023D                      u2131 004E  
                    u2140 0053                      u2141 0052  
                    _INDF 0000                      u2150 0067  
                    u2207 035A                      u2151 0066  
                    u2160 0079                      u2217 0337  
                    u2161 0078                      u2090 022F  
                    u2170 03A0                      u2091 022E  
                    u2227 01DA                      u2171 039F  
                    u2237 01E1                      u2247 01E8  
                    u2257 0281                      u2185 0323  
                    u2197 0314                      u1830 01D3  
                    _PIE1 008C                      u1831 01CF  
                    _PIE2 008D                      u1850 01F6  
                    u1851 01F5                      u1844 01D6  
                    _CVRR 04ED                      u1790 03AE  
                    u1791 03AD                      i1l10 01C4  
                    _PEIE 005E                      i1l11 0191  
                    i1l12 01B3                      _INTE 005C  
                    i1l21 013C                      i1l13 019D  
                    _INTF 0059                      i1l22 013C  
                    i1l14 01B3                      _RBIE 005B  
                    i1l23 0101                      i1l15 01B3  
                    _RBIF 0058                      i1l24 0121  
                    i1l16 01C4                      i1l25 010C  
                    i1l26 0121                      i1l18 02A6  
                    _RCIE 0465                      i1l51 02CF  
                    i1l27 0121                      _RCIF 0065  
                    _RCEN 048B                      i1l52 02CF  
                    i1l28 013C                      i1l44 00DE  
                    i1l45 00A8                      i1l70 037B  
                    i1l46 00B9                      i1l47 00CD  
                    _PCON 008E                      i1l72 0378  
                    i1l48 00DE                      _PIR1 000C  
                    i1l73 0366                      _PIR2 000D  
                    i1l74 036F                      i1l66 0183  
                    i1l75 027C                      i1l67 014F  
                    i1l68 0159                      i1l77 0275  
                    i1l69 0183                      i1l78 0257  
                    i1l79 0261                      _OERR 00C1  
                    _RBPU 040F                      _RX9D 00C0  
                    _TMR0 0001                      _TMR2 0011  
                    _WCOL 00A7                      _SPEN 00C7  
                    _RSEN 0489     __end_of_adc_interrupt 0184  
               __databank 0000                      _TX9D 04C0  
                    _SREN 00C5                      _TRMT 04C1  
                    _STOP 04A4                      _ZERO 001A  
                    _TXIE 0464                      _WREN 0C62  
                    _TXIF 0064                      _TXEN 04C5  
                    _SYNC 04C4          _uart_send_packet 033D  
                    _data 0071                      _main 003F  
                    _init 01F7                      btemp 007E  
                    start 0012         interrupt_function 0004  
       ?_uart_send_packet 004C          i1___bmul_product 006A  
                 ?___bmul 0053                  ??___bmul 0054  
                _rof_init 03BB                   ?___wmul 0053  
                ??___wmul 0057                 ?_rof_init 004C  
                 _CCP1CON 0017                   _CCP2CON 001D  
                _out_fifo 0140                   ?_in_pop 004C  
                _out_iidx 0076                  _out_oidx 0079  
                 _ACKSTAT 048E                  _out_tidx 0078  
                ??_in_pop 004F                     _C1INV 04E4  
                   _C2INV 04E5                     _C1OUT 04E6  
                   _C2OUT 04E7                   ?_my_isr 0059  
                   _ADCS0 00FE                     _ADCS1 00FF  
                   _ADCS2 04FE                     _ADDEN 00C3  
                   ?_main 0049                     _ACKEN 048C  
                   _ACKDT 048D                     ?_init 004C  
                   _BCLIE 046B                     _BCLIF 006B  
                   _CCP1X 00BD                     _CCP1Y 00BC  
                   _CCP2X 00ED                     _CCP2Y 00EC  
              ??_rof_init 004C           _rof_send_packet 02F7  
                   _EEADR 010D                     _CARRY 0018  
                ??_my_isr 0059                     _EEPGD 0C67  
                   _CMCON 009C                     _T1CON 0010  
                   _T2CON 0012                   _T1CKPS0 0084  
                 _T1CKPS1 0085                     _PCFG0 04F8  
                   _PCFG1 04F9                     _PCFG2 04FA  
                   _PCFG3 04FB                   _T2CKPS0 0090  
                 _T2CKPS1 0091                     _CVREN 04EF  
                   _CVROE 04EE          __end_ofi1___bmul 037C  
                   _RCREG 001A                     _RCSTA 0018  
                   i1u750 036A                     i1u751 0369  
                   i1u760 0378                     i1u761 0377  
                   _TMR1H 000F                     _TMR1L 000E  
                   _SPBRG 0099                     _PORTA 0005  
                   _PORTB 0006                   _T1OSCEN 0083  
                   _PORTC 0007                     _PORTD 0008  
                   _PORTE 0009                     _PSPIE 0467  
                   _PSPIF 0067                     _START 04A3  
                   _SSPM0 00A0                     _SSPM1 00A1  
                   _SSPM2 00A2                     _SSPM3 00A3  
        __end_ofi1___wmul 027D                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088                     _SSPIE 0463  
                   _TRISE 0089                     _SSPIF 0063  
                   _SSPEN 00A5                     _SSPOV 00A6  
                   _WRERR 0C63                     _TXREG 0019  
         __end_of_in_push 02D0                     _TXSTA 0098  
        ?_rof_send_packet 004C        ??_uart_send_packet 004F  
     _uart_interrupt_data 005D                     _index 007C  
                   _entry 0073                   _PSPMODE 044C  
                 _SSPCON2 0091   _uart_send_packet_packet 004C  
                 _SSPSTAT 0094                   _TOUTPS0 0093  
                 _TOUTPS1 0094                   _TOUTPS2 0095  
                 _TOUTPS3 0096                 _in_pop_rv 004F  
       ??_rof_send_packet 004F                     pclath 000A  
                intlevel1 0004                     status 0003  
       ___wmul_multiplier 0053            _uart_interrupt 0184  
          _rof_write_byte 01C5           ?_uart_interrupt 005D  
         ?_rof_write_byte 0051            ?_rof_interrupt 005D  
          ___wmul_product 0057          ??_uart_interrupt 005D  
          ??_sb_interrupt 005D           ??_rof_interrupt 005D  
        ??_rof_write_byte 0051     i1___bmul_multiplicand 0069  
                  ??_main 0049                    ??_init 004C  
               _uart_putc 03A7     i1___wmul_multiplicand 006B  
       __end_of_uart_putc 03B2                   _in_fifo 00C0  
        __end_of_adc_read 033D                   _in_iidx 007B  
                 _in_oidx 007A            ?_adc_interrupt 005D  
                 _in_tidx 007D                   _in_push 02A7  
              ?_uart_putc 0051                  ?_in_push 0065  
         ??_adc_interrupt 005D                 ??_in_push 0068  
          __end_of___bmul 0398       i1___wmul_multiplier 0069  
          _uart_putc_byte 0051                    _ADCON0 001F  
                  _ADCON1 009F                    _CCP1M0 00B8  
                  _CCP1M1 00B9                    _CCP1M2 00BA  
                  _CCP1M3 00BB                    _CCP2M0 00E8  
                  _CCP2M1 00E9                    _CCP2M2 00EA  
                  _CCP2M3 00EB                    _CCP1IE 0462  
                  _CCP1IF 0062   __end_of_rof_send_packet 031A  
                  _CCP2IE 0468                    _CCP2IF 0068  
          __end_of___wmul 0251                    _ADRESH 001E  
                  _EEADRH 010F                    _ADRESL 009E  
                  _EEADRL 010D                    _EEDATA 010C  
                  _CCPR1H 0016                    _EEDATH 010E  
                  _CCPR2H 001C                    _CCPR1L 0015  
                  _CCPR2L 001B                    _EECON1 018C  
                  _EECON2 018D               i1l600002149 0165  
            __end_of_main 0094              __end_of_init 0225  
  __end_of_uart_interrupt 01C5                    _GODONE 00FA  
             ??_uart_putc 0051            __end_of_in_pop 02F7  
                  _CVRCON 009D                    _T1SYNC 0082  
                  _INTEDG 040E                    _PCLATH 000A  
                  _INTCON 000B                    i1u2000 00F7  
                  i1u2001 00F6                    i1u2010 00FC  
                  i1u2011 00FB                    i1u2020 0107  
                  i1u2021 0106                    i1u2030 0112  
                  i1u2031 0111                    i1u2120 0275  
                  i1u2040 0137                    i1u2121 0274  
                  i1u2105 0262                    i1u2041 0136  
                  i1u2050 014D                    i1u2115 0269  
                  i1u2060 0155                    i1u2061 0154  
                  i1u2070 015F                    i1u2071 015E  
  __end_of_rof_write_byte 01F7                    i1u2080 0165  
                  i1u2081 0164                    i1u2090 025B  
                  i1u2091 025A                    i1u1900 01BF  
                  i1u1901 01BE                    i1u1910 009A  
                  i1u1911 0099                    i1u1920 00A0  
                  i1u1921 009F                    i1u1930 00AD  
                  i1u1931 00AC                    i1u1860 02CB  
                  i1u1940 00B1                    i1u1861 02CA  
                  i1u1941 00B0                    i1u1870 018B  
                  i1u1950 00BF                    i1u1871 018A  
                  i1u1951 00BE                    i1u1880 0197  
                  i1u1960 00C5                    i1u1881 0196  
                  i1u1961 00C4                    i1u1890 01A3  
                  i1u1970 00D2                    i1u1891 01A2  
                  i1u1971 00D1                    i1u1980 00D6  
                  i1u1981 00D5                    i1u1995 0292  
          __end_of_my_isr 00E9                    _TMR0IE 005D  
                  _TMR0IF 005A                    _TMR1IE 0460  
                  _TMR1IF 0060                    _TMR1CS 0081  
                  _TMR2IE 0461                    _TMR2IF 0061  
                  _TMR1ON 0080                    _OPTION 0081  
                  _TMR2ON 0092                    _SSPADD 0093  
                  _TRISA0 0428                    _TRISA1 0429  
                  _TRISB0 0430                    _TRISA2 042A  
                  _TRISB1 0431                    _TRISA3 042B  
                  _TRISC0 0438                    _TRISB2 0432  
                  _TRISA4 042C                    _TRISC1 0439  
                  _TRISB3 0433                    _TRISA5 042D  
                  _TRISD0 0440                    _TRISC2 043A  
                  _TRISB4 0434                    _TRISD1 0441  
                  _TRISC3 043B                    _TRISB5 0435  
                  _TRISE0 0448                    _TRISD2 0442  
                  _TRISC4 043C                    _TRISB6 0436  
                  _TRISE1 0449                    _TRISD3 0443  
                  _TRISC5 043D                    _TRISB7 0437  
                  _TRISE2 044A                    _TRISD4 0444  
                  _TRISC6 043E                    _TRISD5 0445  
                  _TRISC7 043F                    _TRISD6 0446  
                  _TRISD7 0447                    _STATUS 0003  
                  _SSPCON 0014                    _SSPBUF 0013  
             _adc_advance 03B2               _adc_channel 0070  
     _sb_interrupt_packet 005D       __end_of_adc_advance 03BB  
                  ___bmul 037C                    ___wmul 0225  
        __end_of_rof_init 03C1                _main_entry 0049  
            _sb_interrupt 027D                    _in_pop 02D0  
                  _packet 003E                _index_F877 0077  
     ___bmul_multiplicand 0053                    _my_isr 0094  
              _in_pending 0398       ___wmul_multiplicand 0055  
                  _values 0041        __end_of_in_pending 03A7  
     _rof_write_byte_data 0051  __end_of_uart_send_packet 0360  
                i1___bmul 0360      __end_of_sb_interrupt 02A7  
            ?_adc_advance 004C                  i1___wmul 0251  
               ?i1___bmul 0069                 ?i1___wmul 0069  
           _in_push_entry 0065            ___bmul_product 0055  
                  saved_w 007F               ?_in_pending 004C  
              ??i1___bmul 006A    _adc_interrupt_hi_bound 0060  
              ??i1___wmul 006D   _adc_interrupt_old_value 005D  
 _adc_interrupt_new_value 005E    _adc_interrupt_lo_bound 005F  
       ___bmul_multiplier 0054          i1___wmul_product 006D  
                __Hcommon 007E                 __Hrdata_0 0001  
               __Hramdata 0001                  __Hrbss_0 0049  
                __Hrbss_1 00F0                  __Hrbss_2 0170  
                __Lcommon 0070  
